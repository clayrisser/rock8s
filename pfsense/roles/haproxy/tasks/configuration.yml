---
- name: Check haproxy configuration
  ansible.builtin.shell: |
    cat > /tmp/check_haproxy.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    function array_compare($a1, $a2) {
        $a1_filtered = array_filter($a1, function($key) {
            return $key !== "id" && $key !== "_index";
        }, ARRAY_FILTER_USE_KEY);
        $a2_filtered = array_filter($a2, function($key) {
            return $key !== "id" && $key !== "_index";
        }, ARRAY_FILTER_USE_KEY);
        if (isset($a1_filtered['frontends']) && isset($a2_filtered['frontends'])) {
            $frontends1 = array();
            $frontends2 = array();
            foreach ($a1_filtered['frontends'] as $frontend) {
                if (isset($frontend['name'])) {
                    $frontends1[$frontend['name']] = array_filter($frontend, function($key) {
                        return $key !== "id" && $key !== "_index";
                    }, ARRAY_FILTER_USE_KEY);
                    if (isset($frontends1[$frontend['name']]['a_extaddr']['item'])) {
                        foreach ($frontends1[$frontend['name']]['a_extaddr']['item'] as $idx => $item) {
                            $frontends1[$frontend['name']]['a_extaddr']['item'][$idx] = 
                                array_filter($item, function($key) {
                                    return $key !== "id" && $key !== "_index";
                                }, ARRAY_FILTER_USE_KEY);
                        }
                    }
                }
            }
            foreach ($a2_filtered['frontends'] as $frontend) {
                if (isset($frontend['name'])) {
                    $frontends2[$frontend['name']] = array_filter($frontend, function($key) {
                        return $key !== "id" && $key !== "_index";
                    }, ARRAY_FILTER_USE_KEY);
                    if (isset($frontends2[$frontend['name']]['a_extaddr']['item'])) {
                        foreach ($frontends2[$frontend['name']]['a_extaddr']['item'] as $idx => $item) {
                            $frontends2[$frontend['name']]['a_extaddr']['item'][$idx] = 
                                array_filter($item, function($key) {
                                    return $key !== "id" && $key !== "_index";
                                }, ARRAY_FILTER_USE_KEY);
                        }
                    }
                }
            }
            foreach ($frontends2 as $name => $frontend) {
                if (!isset($frontends1[$name])) {
                    return false;
                }
                if (!array_compare_recursive($frontends1[$name], $frontend)) {
                    return false;
                }
            }
            unset($a1_filtered['frontends']);
            unset($a2_filtered['frontends']);
        }
        if (isset($a1_filtered['backends']) && isset($a2_filtered['backends'])) {
            $backends1 = array();
            $backends2 = array();
            foreach ($a1_filtered['backends'] as $backend) {
                if (isset($backend['name'])) {
                    $backends1[$backend['name']] = array_filter($backend, function($key) {
                        return $key !== "id" && $key !== "_index";
                    }, ARRAY_FILTER_USE_KEY);
                    if (isset($backends1[$backend['name']]['ha_servers']['item'])) {
                        $servers = $backends1[$backend['name']]['ha_servers']['item'];
                        usort($servers, function($a, $b) {
                            $a_key = $a['address'] . ':' . $a['port'];
                            $b_key = $b['address'] . ':' . $b['port'];
                            return strcmp($a_key, $b_key);
                        });
                        foreach ($servers as $idx => $server) {
                            $servers[$idx] = array_filter($server, function($key) {
                                return $key !== "id" && $key !== "_index";
                            }, ARRAY_FILTER_USE_KEY);
                        }
                        $backends1[$backend['name']]['ha_servers']['item'] = $servers;
                    }
                }
            }
            foreach ($a2_filtered['backends'] as $backend) {
                if (isset($backend['name'])) {
                    $backends2[$backend['name']] = array_filter($backend, function($key) {
                        return $key !== "id" && $key !== "_index";
                    }, ARRAY_FILTER_USE_KEY);
                    if (isset($backends2[$backend['name']]['ha_servers']['item'])) {
                        $servers = $backends2[$backend['name']]['ha_servers']['item'];
                        usort($servers, function($a, $b) {
                            $a_key = $a['address'] . ':' . $a['port'];
                            $b_key = $b['address'] . ':' . $b['port'];
                            return strcmp($a_key, $b_key);
                        });
                        foreach ($servers as $idx => $server) {
                            $servers[$idx] = array_filter($server, function($key) {
                                return $key !== "id" && $key !== "_index";
                            }, ARRAY_FILTER_USE_KEY);
                        }
                        $backends2[$backend['name']]['ha_servers']['item'] = $servers;
                    }
                }
            }
            foreach ($backends2 as $name => $backend) {
                if (!isset($backends1[$name])) {
                    return false;
                }
                if (!array_compare_recursive($backends1[$name], $backend)) {
                    return false;
                }
            }
            unset($a1_filtered['backends']);
            unset($a2_filtered['backends']);
        }
        return array_compare_recursive($a1_filtered, $a2_filtered);
    }
    function array_compare_recursive($a1, $a2) {
        if (count($a1) !== count($a2)) {
            return false;
        }
        foreach ($a1 as $key => $value) {
            if (!array_key_exists($key, $a2)) {
                return false;
            }
            if (is_array($value)) {
                if (!is_array($a2[$key])) {
                    return false;
                }
                if ($key === "item") {
                    if (count($value) !== count($a2[$key])) {
                        return false;
                    }
                    $value_sorted = $value;
                    $a2_value_sorted = $a2[$key];
                    usort($value_sorted, function($a, $b) {
                        return strcmp(json_encode($a), json_encode($b));
                    });
                    usort($a2_value_sorted, function($a, $b) {
                        return strcmp(json_encode($a), json_encode($b));
                    });
                    for ($i = 0; $i < count($value_sorted); $i++) {
                        if (!array_compare_recursive($value_sorted[$i], $a2_value_sorted[$i])) {
                            return false;
                        }
                    }
                } else if (!array_compare_recursive($value, $a2[$key])) {
                    return false;
                }
            } else if ($value !== $a2[$key]) {
                return false;
            }
        }
        return true;
    }
    function config_exists() {
        global $config;
        if (!isset($config['installedpackages'])) return false;
        if (!isset($config['installedpackages']['haproxy'])) return false;
        if (!isset($config['installedpackages']['haproxy']['ha_backends'])) return false;
        if (!isset($config['installedpackages']['haproxy']['ha_pools'])) return false;
        return true;
    }
    $current = array(
        'frontends' => array(),
        'backends' => array()
    );
    if (config_exists()) {
        if (isset($config['installedpackages']['haproxy']['ha_backends']['item'])) {
            $current['frontends'] = $config['installedpackages']['haproxy']['ha_backends']['item'];
        }
        if (isset($config['installedpackages']['haproxy']['ha_pools']['item'])) {
            $current['backends'] = $config['installedpackages']['haproxy']['ha_pools']['item'];
        }
    }
    function get_next_id($type) {
        static $counters = array(
            'frontend' => 0,
            'backend' => 0,
            'server' => 0
        );
        $base_id = array(
            'frontend' => 10000,
            'backend' => 20000,
            'server' => 30000
        );
        $counters[$type]++;
        return strval($base_id[$type] + $counters[$type]);
    }
    function parse_key_values($str) {
        $result = array();
        if (empty($str)) return $result;
        $pairs = explode(';', $str);
        foreach ($pairs as $pair) {
            $pair = trim($pair);
            if (empty($pair)) continue;
            if (strpos($pair, '=') === false) {
                $result[$pair] = '';
            } else {
                list($key, $value) = explode('=', $pair, 2);
                $result[trim($key)] = trim($value);
            }
        }
        return $result;
    }
    function parse_frontend_target($str) {
        $parts = explode(':', trim($str));
        $result = array(
            'rules' => array(),
            'host' => '',
            'port' => ''
        );
        if (preg_match('/^([0-9a-fA-F:]+):{1,3}(\d+)$/', trim($str), $matches)) {
            $result['host'] = $matches[1];
            $result['port'] = $matches[2];
            return $result;
        }
        if (count($parts) > 3 && preg_match('/^[0-9a-fA-F:]+$/', $parts[0])) {
            $port = array_pop($parts);
            $ipv6 = implode(':', $parts);
            if (is_numeric($port) && preg_match('/^[0-9a-fA-F:]+$/', $ipv6)) {
                $result['host'] = $ipv6;
                $result['port'] = $port;
                return $result;
            }
            $parts = explode(':', trim($str));
        }
        if (preg_match('/^\[([0-9a-fA-F:]+)\]:(\d+)$/', trim($str), $matches)) {
            $result['host'] = $matches[1];
            $result['port'] = $matches[2];
            return $result;
        }
        switch(count($parts)) {
            case 3:
                $result['rules'] = parse_key_values($parts[0]);
                $result['host'] = $parts[1];
                $result['port'] = $parts[2];
                break;
            case 2:
                $result['host'] = $parts[0];
                $result['port'] = $parts[1];
                break;
            case 1:
                $result['port'] = $parts[0];
                break;
        }
        return $result;
    }
    function parse_backend_target($str) {
        $result = array(
            'rules' => array(),
            'host' => '',
            'port' => '',
            'weight' => ''
        );
        $parts = explode('@', trim($str));
        $target = $parts[0];
        if (count($parts) > 1) {
            $result['weight'] = trim($parts[1]);
        }
        if (preg_match('/^(?:check:)?\[([0-9a-fA-F:]+)\]:(\d+)$/', trim($target), $matches)) {
            $result['host'] = $matches[1];
            $result['port'] = $matches[2];
            if (strpos($target, 'check:') === 0) {
                $result['rules']['check'] = '';
            }
            return $result;
        }
        $parts = explode(':', trim($target));
        if (count($parts) >= 2 && $parts[0] === 'check') {
            $result['rules']['check'] = '';
            array_shift($parts);
        }
        if (preg_match('/^(?:check:)?([0-9a-fA-F:]+):{1,3}(\d+)$/', trim($target), $matches)) {
            $result['host'] = $matches[1];
            $result['port'] = $matches[2];
            if (strpos($target, 'check:') === 0) {
                $result['rules']['check'] = '';
            }
            return $result;
        }
        if (count($parts) > 3 && preg_match('/^[0-9a-fA-F:]+$/', $parts[0])) {
            $port = array_pop($parts);
            $ipv6 = implode(':', $parts);
            if (is_numeric($port) && preg_match('/^[0-9a-fA-F:]+$/', $ipv6)) {
                $result['host'] = $ipv6;
                $result['port'] = $port;
                return $result;
            }
            $parts = explode(':', trim($target));
            if (count($parts) >= 2 && $parts[0] === 'check') {
                $result['rules']['check'] = '';
                array_shift($parts);
            }
        }
        switch(count($parts)) {
            case 3:
                if (!isset($result['rules']['check'])) {
                    $result['rules'] = parse_key_values($parts[0]);
                }
                $result['host'] = $parts[1];
                $result['port'] = $parts[2];
                break;
            case 2:
                if (strpos($parts[0], '=') !== false || strpos($parts[0], ';') !== false) {
                    if (!isset($result['rules']['check'])) {
                        $result['rules'] = parse_key_values(array_shift($parts));
                    }
                    $result['host'] = $parts[0];
                    $result['port'] = $parts[1];
                } else {
                    $result['host'] = $parts[0];
                    $result['port'] = $parts[1];
                }
                break;
            case 1:
                $result['port'] = $parts[0];
                break;
        }
        return $result;
    }
    function format_name($rule, $type = 'both') {
        $parts = explode(' -> ', trim($rule));
        $cleaned_parts = array();
        if ($type === 'frontend' || $type === 'both') {
            $frontend = trim($parts[0]);
            if (preg_match('/^([0-9a-fA-F:]+):{1,3}(\d+)$/', $frontend, $matches)) {
                $cleaned_parts[] = preg_replace('/:+/', '-', $matches[1]) . '-' . $matches[2];
            } else {
                $frontend_subparts = explode(':', $frontend);
                if (count($frontend_subparts) > 1 && (strpos($frontend_subparts[0], '=') !== false || strpos($frontend_subparts[0], ';') !== false)) {
                    array_shift($frontend_subparts);
                }
                $cleaned_parts[] = implode('-', $frontend_subparts);
            }
        }
        if ($type === 'backend' || $type === 'both') {
            if (count($parts) > 1) {
                $backend = trim($parts[1]);
                if (strpos($backend, '|') !== false) {
                    list($shared_opts, $backend) = explode('|', $backend, 2);
                    $backend = trim($backend);
                }
                $backend_targets = array_map('trim', explode(',', $backend));
                $cleaned_backend_parts = array();
                foreach ($backend_targets as $target) {
                    if (preg_match('/^(?:check:)?([0-9a-fA-F:]+):{1,3}(\d+)$/', $target, $matches)) {
                        $cleaned_backend_parts[] = preg_replace('/:+/', '-', $matches[1]) . '-' . $matches[2];
                    } else {
                        $target_parts = explode(':', $target);
                        if (count($target_parts) > 1 && (strpos($target_parts[0], '=') !== false || strpos($target_parts[0], ';') !== false)) {
                            array_shift($target_parts);
                        }
                        if (count($target_parts) == 3 && $target_parts[0] === 'check') {
                            array_shift($target_parts);
                        }
                        $cleaned_backend_parts[] = implode('-', $target_parts);
                    }
                }
                $cleaned_parts[] = implode('-', $cleaned_backend_parts);
            }
        }
        return preg_replace('/-+/', '-', implode('_', $cleaned_parts));
    }
    $rules = {{ parsed_rules | to_json }};
    $desired = array(
        'frontends' => array(),
        'backends' => array()
    );
    if (!isset($config['installedpackages']['haproxy'])) {
        $config['installedpackages']['haproxy'] = array();
    }
    $config['installedpackages']['haproxy']['enable'] = '';
    foreach ($rules as $rule) {
        list($frontend_part, $backend_part) = explode('->', trim($rule), 2);
        $frontend = parse_frontend_target(trim($frontend_part));
        $port = $frontend['port'];
        $shared_config = array();
        $backend_targets_str = trim($backend_part);
        if (strpos($backend_targets_str, '|') !== false) {
            list($shared_opts, $backend_targets_str) = explode('|', $backend_targets_str, 2);
            $shared_config = parse_key_values(trim($shared_opts));
        }
        $frontend_name = format_name($rule, 'frontend');
        $backend_name = format_name($rule, 'backend');
        $frontend_config = array(
            'name' => $frontend_name,
            'status' => 'active',
            'type' => isset($frontend['rules']['type']) ? $frontend['rules']['type'] : 'tcp',
            'httpclose' => 'http-keep-alive',
            'backend_serverpool' => $backend_name,
            'advanced' => '',
            'ha_acls' => '',
            'ha_certificates' => '',
            'clientcert_ca' => '',
            'clientcert_crl' => '',
            'descr' => $rule,
            'a_extaddr' => array(
                'item' => array(
                    array(
                        'extaddr' => !empty($frontend['host']) ? 'custom' :
                                   (strpos($frontend_part, 'wan:') === 0 ? 'wan_ipv4' : 'any_ipv4'),
                        'extaddr_custom' => !empty($frontend['host']) ? $frontend['host'] : '',
                        'extaddr_port' => $port,
                        '_index' => ''
                    )
                )
            ),
            'a_actionitems' => '',
            'a_errorfiles' => '',
            'id' => strval(get_next_id('frontend'))
        );
        if (isset($frontend['rules']['ssl'])) {
            $frontend_config['ssloffloadcert'] = $frontend['rules']['ssl'];
            $frontend_config['ssloffloadacl_an'] = 'yes';
        }
        foreach ($frontend['rules'] as $key => $value) {
            if ($key !== 'ssl') {
                $frontend_config[$key] = $value;
            }
        }
        $desired['frontends'][] = $frontend_config;
        $backend = array(
            'name' => $backend_name,
            'descr' => $rule,
            'status' => 'active',
            'ha_servers' => array('item' => array()),
            'a_acl' => '',
            'a_actionitems' => '',
            'errorfiles' => '',
            'advanced' => '',
            'advanced_backend' => '',
            'balance' => isset($shared_config['balance']) ? $shared_config['balance'] : 'roundrobin',
            'check_type' => (function() use ($shared_config, $backend_targets_str) {
                if (preg_match('/check=([^:;]+)/', $backend_targets_str, $matches)) {
                    return $matches[1];
                }
                if (preg_match('/(?:^|;)check(?::|\s*$|;)/', $backend_targets_str)) {
                    return 'Basic';
                }
                if (array_key_exists('check', $shared_config) && empty($shared_config['check'])) {
                    return 'Basic';
                }
                return 'none';
            })(),
            'id' => strval(get_next_id('backend'))
        );
        foreach ($shared_config as $key => $value) {
            if (!in_array($key, array('balance', 'check'))) {
                $backend[$key] = $value;
            }
        }
        $backend_targets = array_map('trim', explode(',', $backend_targets_str));
        foreach ($backend_targets as $idx => $target) {
            $target_info = parse_backend_target($target);
            $server = array(
                'status' => 'active',
                'name' => "{$backend_name}_{$idx}",
                'descr' => $target,
                'address' => $target_info['host'],
                'port' => $target_info['port'],
                '_index' => '',
                'id' => strval(get_next_id('server')),
                'check' => ''
            );
            if (!empty($target_info['weight'])) {
                $server['weight'] = $target_info['weight'];
            }
            foreach ($target_info['rules'] as $key => $value) {
                $server[$key] = $value;
            }
            $backend['ha_servers']['item'][] = $server;
        }
        $desired['backends'][] = $backend;
    }
    $changed = !array_compare($current, $desired);
    $config_exists = config_exists();
    echo json_encode(array(
        'changed' => $changed,
        'current' => $current,
        'desired' => $desired,
        'config_exists' => $config_exists
    ));
    EOF
    php -f /tmp/check_haproxy.php
    rm -f /tmp/check_haproxy.php
  register: haproxy_check
  changed_when: false
  when: primary
