---
- name: Check virtual ips
  ansible.builtin.shell: |
    cat > /tmp/check_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    $config = parse_config(true);
    $ipv4_addresses = array("95.217.29.248");
    $ipv6_addresses = array("2a01:4f9:c01f:e00e::");
    $interface_map = array(
        "95.217.29.248" => "wan",
        "2a01:4f9:c01f:e00e::" => "wan"
    );
    $subnet_bits = array(
        "95.217.29.248" => "32",
        "2a01:4f9:c01f:e00e::" => "64"
    );
    $existing_vips = array();
    $existing_vip_details = array();
    if (isset($config["virtualip"]["vip"])) {
        foreach ($config["virtualip"]["vip"] as $vip) {
            $existing_vips[] = $vip["subnet"];
            $existing_vip_details[] = $vip;
        }
    }
    $ipv4_to_add = array_values(array_diff($ipv4_addresses, $existing_vips));
    $ipv6_to_add = array_values(array_diff($ipv6_addresses, $existing_vips));
    $ips_to_add = array_merge($ipv4_to_add, $ipv6_to_add);
    $result = array(
        "changed" => !empty($ips_to_add),
        "ips_to_add" => $ips_to_add,
        "interface_map" => $interface_map,
        "subnet_bits" => $subnet_bits,
        "existing_vip_details" => $existing_vip_details
    );
    file_put_contents("/tmp/check_result.json", json_encode($result));
    echo json_encode($result);
    EOF
    php -f /tmp/check_virtual_ips.php
    rm -f /tmp/check_virtual_ips.php
  register: check_result
  changed_when: (check_result.stdout | from_json).changed
  when: primary

- name: Configure virtual ips
  ansible.builtin.shell: |
    cat > /tmp/configure_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    require_once("/etc/inc/services.inc");
    $json_str = file_get_contents('/tmp/check_result.json');
    if ($json_str === false) {
        exit(1);
    }
    $result = json_decode($json_str, true);
    if ($result === null) {
        exit(1);
    }
    if (!isset($result['changed']) || !isset($result['ips_to_add']) || !isset($result['interface_map']) || !isset($result['subnet_bits'])) {
        exit(1);
    }
    if (!$result['changed']) {
        echo "UNCHANGED";
        exit(0);
    }
    global $config;
    $config = parse_config(true);
    if (!is_array($config)) {
        exit(1);
    }
    if (!isset($config['virtualip']) || !is_array($config['virtualip'])) {
        $config['virtualip'] = array();
    }
    if (!isset($config['virtualip']['vip']) || !is_array($config['virtualip']['vip'])) {
        $config['virtualip']['vip'] = array();
    }
    $max_vhid = 0;
    foreach ($result['existing_vip_details'] as $vip) {
        if (isset($vip['vhid']) && $vip['vhid'] > $max_vhid) {
            $max_vhid = $vip['vhid'];
        }
    }
    $next_vhid = $max_vhid + 1;
    {% if ansible_play_hosts | length > 1 %}
    $random_password = bin2hex(random_bytes(8));
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : (is_ipaddrv6($ip) ? '64' : '32');
        $new_vip = array(
            'mode' => 'carp',
            'interface' => $interface,
            'subnet' => $ip,
            'subnet_bits' => $subnet_bits,
            'vhid' => $next_vhid,
            'advskew' => '{{ 0 if primary else 100 }}',
            'advbase' => '1',
            'password' => $random_password,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single'
        );
        $config['virtualip']['vip'][] = $new_vip;
        $next_vhid++;
    }
    {% else %}
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : (is_ipaddrv6($ip) ? '64' : '32');
        $new_vip = array(
            'mode' => 'ipalias',
            'interface' => $interface,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single',
            'subnet_bits' => $subnet_bits,
            'subnet' => $ip
        );
        $config['virtualip']['vip'][] = $new_vip;
    }
    {% endif %}
    if (write_config(sprintf('Added virtual ips from ansible (%s@%s)', '{{ ansible_user }}', '{{ ansible_host }}'))) {
        foreach (array_unique(array_values($result['interface_map'])) as $interface) {
            interface_configure($interface);
        }
        echo "CHANGED";
        exit(0);
    }
    echo "UNCHANGED";
    exit(0);
    EOF
    php -f /tmp/configure_virtual_ips.php
    rm -f /tmp/configure_virtual_ips.php /tmp/check_result.json
  register: configure_result
  when: primary and check_result is defined and check_result.stdout is defined and (check_result.stdout | from_json).changed
  changed_when: configure_result.stdout == "CHANGED"

- name: Restart all interfaces
  ansible.builtin.shell: |
    cat > /tmp/restart_interfaces.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("interfaces.inc");
    require_once("util.inc");
    $interfaces = get_configured_interface_list();
    foreach ($interfaces as $interface) {
        interface_bring_down($interface);
        interface_configure($interface);
    }
    EOF
    php -f /tmp/restart_interfaces.php
    rm -f /tmp/restart_interfaces.php
  when: configure_result.changed

- name: Check if ipv6 virtual ip exists
  ansible.builtin.shell: |
    php -r '
    require_once("config.inc");
    $config = parse_config(true);
    $ipv6_exists = false;
    $ipv6_addr = "2a01:4f9:c01f:e00e::";
    if (isset($config["virtualip"]["vip"])) {
      foreach ($config["virtualip"]["vip"] as $vip) {
        if ($vip["subnet"] === $ipv6_addr) {
          $ipv6_exists = true;
          if ($vip["descr"] === $ipv6_addr &&
              $vip["interface"] === "wan" &&
              $vip["subnet_bits"] === "64") {
            echo "CORRECTLY_CONFIGURED";
            exit(0);
          }
        }
      }
    }
    if ($ipv6_exists) {
      echo "EXISTS_BUT_WRONG_CONFIG";
    } else {
      echo "MISSING";
    }
    '
  args:
    executable: /bin/sh
  register: ipv6_check
  changed_when: false
  when: primary

- name: Create ipv6 virtual ip for haproxy
  ansible.builtin.shell: |
    php -r '
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    $config = parse_config(true);
    $ipv6_addr = "2a01:4f9:c01f:e00e::";
    $interface = "wan";
    $subnet_bits = "64";
    if (isset($config["virtualip"]["vip"])) {
      foreach ($config["virtualip"]["vip"] as $key => $vip) {
        if ($vip["subnet"] === $ipv6_addr) {
          unset($config["virtualip"]["vip"][$key]);
        }
      }
    }
    if (!isset($config["virtualip"])) {
      $config["virtualip"] = array();
    }
    if (!isset($config["virtualip"]["vip"]) || !is_array($config["virtualip"]["vip"])) {
      $config["virtualip"]["vip"] = array();
    }
    $new_vip = array(
      "mode" => "ipalias",
      "interface" => $interface,
      "uniqid" => uniqid(),
      "descr" => $ipv6_addr,
      "type" => "single",
      "subnet_bits" => $subnet_bits,
      "subnet" => $ipv6_addr
    );
    $config["virtualip"]["vip"][] = $new_vip;
    if (write_config(sprintf("Added IPv6 virtual IP from ansible (%s@%s)", "admin", "172.20.0.2"))) {
      interface_configure($interface);
      echo "CHANGED";
      exit(0);
    }
    echo "UNCHANGED";
    '
  args:
    executable: /bin/sh
  register: ipv6_create
  changed_when: ipv6_create.stdout == "CHANGED"
  when:
    - primary
    - ipv6_check.stdout is defined
    - ipv6_check.stdout != "CORRECTLY_CONFIGURED"
