---
- name: Check virtual ips
  ansible.builtin.shell: |
    cat > /tmp/check_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    require_once("/etc/inc/filter.inc");
    $config = parse_config(true);
    $ipv4_addresses = array();
    $ipv6_addresses = array();
    $interface_map = array();
    $subnet_bits = array();
    function add_ip($ip) {
        global $ipv4_addresses, $ipv6_addresses, $interface_map, $subnet_bits;
        if (empty($ip)) return;
        if (preg_match('/^(\[[0-9a-fA-F:]+\]):\d+$/', $ip, $matches)) {
            $ip = trim($matches[1], '[]');
        } elseif (preg_match('/^([^:]+):\d+$/', $ip, $matches)) {
            $ip = $matches[1];
        }
        $ip = trim($ip, '[]');
        if (strpos($ip, '/') !== false) {
            list($ip_part, $subnet_part) = explode('/', $ip, 2);
            $ip = $ip_part;
            if (is_numeric($subnet_part)) {
                $subnet_bits[$ip] = $subnet_part;
            }
        }
        if ($ip == "any" || $ip == "self" || $ip == "0.0.0.0" || $ip == "::" || 
            strpos($ip, '127.') === 0 || strpos($ip, '192.168.') === 0 || 
            strpos($ip, '10.') === 0 || 
            (strpos($ip, '172.') === 0 && preg_match('/^172\.(1[6-9]|2[0-9]|3[0-1])\./', $ip)) ||
            strpos($ip, 'fc00:') === 0 || $ip == '::1' || 
            strpos($ip, 'fe80:') === 0 || strpos($ip, 'lan') === 0) {
            return;
        }
        if (is_ipaddrv4($ip)) {
            if (!in_array($ip, $ipv4_addresses)) {
                $ipv4_addresses[] = $ip;
                $interface_map[$ip] = "wan";
                if (!isset($subnet_bits[$ip])) {
                    $subnet_bits[$ip] = "32";
                }
            }
        } elseif (is_ipaddrv6($ip)) {
            if (!in_array($ip, $ipv6_addresses)) {
                $ipv6_addresses[] = $ip;
                $interface_map[$ip] = "wan";
                if (!isset($subnet_bits[$ip])) {
                    $subnet_bits[$ip] = "64";
                }
            }
        }
    }
    if (isset($config['filter']['rule'])) {
        foreach ($config['filter']['rule'] as $rule) {
            if (isset($rule['destination']['address'])) {
                add_ip($rule['destination']['address']);
            }
            if (isset($rule['source']['address']) && $rule['source']['address'] !== 'any') {
                add_ip($rule['source']['address']);
            }
        }
    }
    if (isset($config['pfsense']['network']['interfaces'])) {
        foreach ($config['pfsense']['network']['interfaces'] as $interface_name => $interface) {
            if (isset($interface['rules']) && is_array($interface['rules'])) {
                foreach ($interface['rules'] as $rule) {
                    if (preg_match('/to\s+([^\s]+)(?:\s+|$)/', $rule, $matches)) {
                        add_ip($matches[1]);
                    }
                    if (preg_match('/from\s+([^\s]+)\s+to/', $rule, $matches) && $matches[1] !== 'any' && $matches[1] !== 'self') {
                        add_ip($matches[1]);
                    }
                    if (preg_match('/from\s+\[?([^\]\s]+)\]?\s+port\s+\d+(?:-\d+)?\s+to/', $rule, $matches)) {
                        add_ip($matches[1]);
                    }
                    if (preg_match('/\"([^\"]+)\"/', $rule, $matches)) {
                        $quoted_content = $matches[1];
                        if (preg_match('/\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/', $quoted_content, $ip_matches)) {
                            add_ip($ip_matches[0]);
                        }
                        if (preg_match('/\b(?:[0-9a-fA-F]{1,4}:){2,7}[0-9a-fA-F]{0,4}\b/', $quoted_content, $ip_matches)) {
                            add_ip($ip_matches[0]);
                        }
                    }
                }
            }
        }
    }
    if (isset($config['pfsense']['haproxy']['rules'])) {
        foreach ($config['pfsense']['haproxy']['rules'] as $rule) {
            if (preg_match('/^(?:\[?([^\]:\s]+(?::[^\]:\s]+)*)\]?):(\d+)\s*->\s*/', $rule, $matches)) {
                add_ip($matches[1]);
            }
            if (preg_match('/^[a-z0-9]+:([^:\s]+):(\d+)\s*->\s*/', $rule, $matches)) {
                add_ip($matches[1]);
            }
            if (preg_match('/->\s*(.+)$/', $rule, $matches)) {
                $backend_part = $matches[1];
                if (preg_match_all('/\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/', $backend_part, $ip_matches)) {
                    foreach ($ip_matches[0] as $ip) {
                        add_ip($ip);
                    }
                }
                if (preg_match_all('/\[([0-9a-fA-F:]+)\]/', $backend_part, $ip_matches)) {
                    foreach ($ip_matches[1] as $ip) {
                        add_ip($ip);
                    }
                }
                if (preg_match_all('/\b(?:[0-9a-fA-F]{1,4}:){2,7}[0-9a-fA-F]{0,4}\b/', $backend_part, $ip_matches)) {
                    foreach ($ip_matches[0] as $ip) {
                        add_ip($ip);
                    }
                }
            }
        }
    }
    $hardcoded_ipv4 = array("95.217.29.248");
    $hardcoded_ipv6 = array("2a01:4f9:c01f:e00e::");
    foreach ($hardcoded_ipv4 as $ip) {
        add_ip($ip);
    }
    foreach ($hardcoded_ipv6 as $ip) {
        add_ip($ip);
    }
    $existing_vips = array();
    $existing_vip_details = array();
    if (isset($config["virtualip"]["vip"])) {
        foreach ($config["virtualip"]["vip"] as $vip) {
            $existing_vips[] = $vip["subnet"];
            $existing_vip_details[] = $vip;
        }
    }
    $ipv4_to_add = array_values(array_diff($ipv4_addresses, $existing_vips));
    $ipv6_to_add = array_values(array_diff($ipv6_addresses, $existing_vips));
    $ips_to_add = array_merge($ipv4_to_add, $ipv6_to_add);
    $result = array(
        "changed" => !empty($ips_to_add),
        "ips_to_add" => $ips_to_add,
        "interface_map" => $interface_map,
        "subnet_bits" => $subnet_bits,
        "existing_vip_details" => $existing_vip_details,
        "discovered_ipv4" => $ipv4_addresses,
        "discovered_ipv6" => $ipv6_addresses
    );
    echo json_encode($result);
    EOF
    php -f /tmp/check_virtual_ips.php
    rm -f /tmp/check_virtual_ips.php
  register: check_result
  changed_when: (check_result.stdout | from_json).changed
  when: primary

- name: Set ip facts
  ansible.builtin.set_fact:
    vip_check_data: "{{ check_result.stdout | from_json }}"
    ipv6_addresses_b64: "{{ (check_result.stdout | from_json).discovered_ipv6 | to_json | b64encode }}"
    ipv4_addresses_b64: "{{ (check_result.stdout | from_json).discovered_ipv4 | to_json | b64encode }}"
  when: primary and check_result is defined and check_result.stdout is defined

- name: Configure virtual ips
  ansible.builtin.shell: |
    cat > /tmp/configure_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    require_once("/etc/inc/services.inc");
    $result = json_decode('{{ vip_check_data | to_json }}', true);
    if (!is_array($result)) {
        exit(1);
    }
    if (!isset($result['changed']) || !isset($result['ips_to_add']) || !isset($result['interface_map']) || !isset($result['subnet_bits'])) {
        exit(1);
    }
    if (!$result['changed']) {
        echo "UNCHANGED";
        exit(0);
    }
    global $config;
    $config = parse_config(true);
    if (!is_array($config)) {
        exit(1);
    }
    if (!isset($config['virtualip']) || !is_array($config['virtualip'])) {
        $config['virtualip'] = array();
    }
    if (!isset($config['virtualip']['vip']) || !is_array($config['virtualip']['vip'])) {
        $config['virtualip']['vip'] = array();
    }
    $max_vhid = 0;
    foreach ($result['existing_vip_details'] as $vip) {
        if (isset($vip['vhid']) && $vip['vhid'] > $max_vhid) {
            $max_vhid = $vip['vhid'];
        }
    }
    $next_vhid = $max_vhid + 1;
    {% if ansible_play_hosts | length > 1 %}
    $random_password = bin2hex(random_bytes(8));
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : (is_ipaddrv6($ip) ? '64' : '32');
        $new_vip = array(
            'mode' => 'carp',
            'interface' => $interface,
            'subnet' => $ip,
            'subnet_bits' => $subnet_bits,
            'vhid' => $next_vhid,
            'advskew' => '{{ 0 if primary else 100 }}',
            'advbase' => '1',
            'password' => $random_password,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single'
        );
        $config['virtualip']['vip'][] = $new_vip;
        $next_vhid++;
    }
    {% else %}
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : (is_ipaddrv6($ip) ? '64' : '32');
        $new_vip = array(
            'mode' => 'ipalias',
            'interface' => $interface,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single',
            'subnet_bits' => $subnet_bits,
            'subnet' => $ip
        );
        $config['virtualip']['vip'][] = $new_vip;
    }
    {% endif %}
    if (write_config(sprintf('Added virtual ips from ansible (%s@%s)', '{{ ansible_user }}', '{{ ansible_host }}'))) {
        foreach (array_unique(array_values($result['interface_map'])) as $interface) {
            interface_configure($interface);
        }
        echo "CHANGED";
        exit(0);
    }
    echo "UNCHANGED";
    exit(0);
    EOF
    php -f /tmp/configure_virtual_ips.php
    rm -f /tmp/configure_virtual_ips.php
  register: configure_result
  when: primary and vip_check_data is defined and vip_check_data.changed
  changed_when: configure_result.stdout == "CHANGED"

- name: Restart all interfaces
  ansible.builtin.shell: |
    cat > /tmp/restart_interfaces.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("interfaces.inc");
    require_once("util.inc");
    $interfaces = get_configured_interface_list();
    foreach ($interfaces as $interface) {
        interface_bring_down($interface);
        interface_configure($interface);
    }
    EOF
    php -f /tmp/restart_interfaces.php
    rm -f /tmp/restart_interfaces.php
  when: configure_result.changed

- name: Check if ipv6 virtual ips exist
  ansible.builtin.shell: |
    php -r "
    require_once('config.inc');
    \$config = parse_config(true);
    \$ipv6_addresses = json_decode(base64_decode('{{ ipv6_addresses_b64 }}'), true);
    if (!is_array(\$ipv6_addresses) || empty(\$ipv6_addresses)) {
      echo 'NO_IPV6_DISCOVERED';
      exit(0);
    }
    \$incorrect_ips = array();
    if (isset(\$config['virtualip']['vip'])) {
      foreach (\$ipv6_addresses as \$ipv6_addr) {
        \$found = false;
        \$correct_config = false;
        foreach (\$config['virtualip']['vip'] as \$vip) {
          if (\$vip['subnet'] === \$ipv6_addr) {
            \$found = true;
            if (\$vip['interface'] === 'wan' && \$vip['subnet_bits'] === '64') {
              \$correct_config = true;
            }
            break;
          }
        }
        if (!\$found || !\$correct_config) {
          \$incorrect_ips[] = \$ipv6_addr;
        }
      }
    } else {
      \$incorrect_ips = \$ipv6_addresses;
    }
    if (empty(\$incorrect_ips)) {
      echo 'ALL_CORRECTLY_CONFIGURED';
    } else {
      echo json_encode(\$incorrect_ips);
    }
    "
  args:
    executable: /bin/sh
  register: ipv6_check
  changed_when: false
  when: primary and ipv6_addresses_b64 is defined

- name: Create ipv6 virtual ips for haproxy
  ansible.builtin.shell: |
    php -r "
    require_once('config.inc');
    require_once('functions.inc');
    require_once('interfaces.inc');
    require_once('/etc/inc/interfaces.inc');
    \$check_result = '{{ ipv6_check.stdout }}';
    if (\$check_result == 'ALL_CORRECTLY_CONFIGURED' || \$check_result == 'NO_IPV6_DISCOVERED') {
      echo 'UNCHANGED';
      exit(0);
    }
    \$ipv6_to_configure = json_decode(\$check_result, true);
    if (!is_array(\$ipv6_to_configure) || empty(\$ipv6_to_configure)) {
      echo 'UNCHANGED';
      exit(0);
    }
    \$config = parse_config(true);
    \$interface = 'wan';
    \$subnet_bits = '64';
    \$changed = false;
    if (isset(\$config['virtualip']['vip'])) {
      foreach (\$config['virtualip']['vip'] as \$key => \$vip) {
        if (in_array(\$vip['subnet'], \$ipv6_to_configure)) {
          unset(\$config['virtualip']['vip'][\$key]);
          \$changed = true;
        }
      }
    }
    if (!isset(\$config['virtualip'])) {
      \$config['virtualip'] = array();
    }
    if (!isset(\$config['virtualip']['vip']) || !is_array(\$config['virtualip']['vip'])) {
      \$config['virtualip']['vip'] = array();
    }
    foreach (\$ipv6_to_configure as \$ipv6_addr) {
      \$new_vip = array(
        'mode' => 'ipalias',
        'interface' => \$interface,
        'uniqid' => uniqid(),
        'descr' => \$ipv6_addr,
        'type' => 'single',
        'subnet_bits' => \$subnet_bits,
        'subnet' => \$ipv6_addr
      );
      \$config['virtualip']['vip'][] = \$new_vip;
      \$changed = true;
    }
    if (\$changed && write_config(sprintf('Added IPv6 virtual IPs from ansible (%s@%s)', '{{ ansible_user }}', '{{ ansible_host }}'))) {
      interface_configure(\$interface);
      echo 'CHANGED';
      exit(0);
    }
    echo 'UNCHANGED';
    "
  args:
    executable: /bin/sh
  register: ipv6_create
  changed_when: ipv6_create.stdout == "CHANGED"
  when:
    - primary
    - ipv6_check.stdout is defined
    - ipv6_check.stdout != "ALL_CORRECTLY_CONFIGURED"
    - ipv6_check.stdout != "NO_IPV6_DISCOVERED"
