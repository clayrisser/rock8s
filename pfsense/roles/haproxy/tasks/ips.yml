---
- name: Check virtual ips
  ansible.builtin.shell: |
    cat > /tmp/check_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    $config = parse_config(true);
    $rules = {{ parsed_rules | to_json }};
    $interface_ips = array();
    {% for interface_name, interface_data in pfsense.network.interfaces.items() %}
    {% if interface_data.ips is defined %}
    $interface_ips['{{ interface_name }}'] = {{ interface_data.ips | to_json }};
    {% endif %}
    {% endfor %}
    $interfaces = array();
    $if_list = get_configured_interface_list();
    foreach ($if_list as $if_name) {
        $interfaces[$if_name] = array(
            'rules' => array(),
            'ips' => array()
        );
        $real_if = get_real_interface($if_name);
        $if_addresses = get_interface_addresses($real_if);
        if (!empty($if_addresses)) {
            foreach ($if_addresses as $if_addr) {
                if (isset($if_addr['ipaddr'])) {
                    $ip_addr = trim($if_addr['ipaddr']);
                    if (is_ipaddr($ip_addr)) {
                        $interfaces[$if_name]['ips'][] = $ip_addr;
                    }
                }
            }
        }
    }
    $needed_ips = array();
    $interface_map = array();
    $subnet_bits = array();
    foreach ($interface_ips as $if_name => $ips) {
        foreach ($ips as $ip) {
            $parts = explode('/', $ip);
            $ip = trim($parts[0]);
            $prefix = isset($parts[1]) ? trim($parts[1]) : '32';
            if (is_ipaddr($ip)) {
                $needed_ips[] = $ip;
                $interface_map[$ip] = $if_name;
                $subnet_bits[$ip] = $prefix;
            }
        }
    }
    foreach ($rules as $rule) {
        $parts = explode('->', trim($rule), 2);
        $frontend = trim($parts[0]);
        $frontend_parts = explode(':', $frontend);
        if (count($frontend_parts) >= 2) {
            $last_part = end($frontend_parts);
            if (is_numeric($last_part)) {
                array_pop($frontend_parts);
            }
            $host = end($frontend_parts);
            if (is_ipaddr($host)) {
                $needed_ips[] = $host;
                $interface = strtolower($frontend_parts[0]);
                if (in_array($interface, array_keys($interfaces))) {
                    $interface_map[$host] = $interface;
                } else {
                    $interface_map[$host] = 'wan';
                }
                $subnet_bits[$host] = '32';
            }
        }
    }
    $needed_ips = array_unique($needed_ips);
    $existing_vips = array();
    $existing_vip_details = array();
    if (isset($config['virtualip']['vip'])) {
        foreach ($config['virtualip']['vip'] as $vip) {
            $existing_vips[] = $vip['subnet'];
            $existing_vip_details[] = $vip;
        }
    }
    $ips_to_add = array_values(array_diff($needed_ips, $existing_vips));
    $result = array(
        'changed' => !empty($ips_to_add),
        'ips_to_add' => $ips_to_add,
        'interface_map' => $interface_map,
        'subnet_bits' => $subnet_bits,
        'existing_vip_details' => $existing_vip_details,
        'debug' => array(
            'interfaces' => $interfaces,
            'needed_ips' => $needed_ips,
            'existing_vips' => $existing_vips,
            'interface_ips' => $interface_ips
        )
    );
    file_put_contents('/tmp/check_result.json', json_encode($result));
    echo json_encode($result);
    EOF
    php -f /tmp/check_virtual_ips.php
    rm -f /tmp/check_virtual_ips.php
  register: check_result
  changed_when: (check_result.stdout | from_json).changed
  when: primary

- name: Configure virtual ips
  shell: |
    cat > /tmp/configure_virtual_ips.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("interfaces.inc");
    require_once("/etc/inc/interfaces.inc");
    require_once("/etc/inc/services.inc");
    $json_str = file_get_contents('/tmp/check_result.json');
    if ($json_str === false) {
        exit(1);
    }
    $result = json_decode($json_str, true);
    if ($result === null) {
        exit(1);
    }
    if (!isset($result['changed']) || !isset($result['ips_to_add']) || !isset($result['interface_map']) || !isset($result['subnet_bits'])) {
        exit(1);
    }
    if (!$result['changed']) {
        echo "UNCHANGED";
        exit(0);
    }
    global $config;
    $config = parse_config(true);
    if (!is_array($config)) {
        exit(1);
    }
    if (!isset($config['virtualip']) || !is_array($config['virtualip'])) {
        $config['virtualip'] = array();
    }
    if (!isset($config['virtualip']['vip']) || !is_array($config['virtualip']['vip'])) {
        $config['virtualip']['vip'] = array();
    }
    $max_vhid = 0;
    foreach ($result['existing_vip_details'] as $vip) {
        if (isset($vip['vhid']) && $vip['vhid'] > $max_vhid) {
            $max_vhid = $vip['vhid'];
        }
    }
    $next_vhid = $max_vhid + 1;
    {% if ansible_play_hosts | length > 1 %}
    $random_password = bin2hex(random_bytes(8));
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : '32';
        $new_vip = array(
            'mode' => 'carp',
            'interface' => $interface,
            'subnet' => $ip,
            'subnet_bits' => $subnet_bits,
            'vhid' => $next_vhid,
            'advskew' => '{{ 0 if primary else 100 }}',
            'advbase' => '1',
            'password' => $random_password,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single'
        );
        $config['virtualip']['vip'][] = $new_vip;
        $next_vhid++;
    }
    {% else %}
    foreach ($result['ips_to_add'] as $ip) {
        $interface = isset($result['interface_map'][$ip]) ? $result['interface_map'][$ip] : 'wan';
        $subnet_bits = isset($result['subnet_bits'][$ip]) ? $result['subnet_bits'][$ip] : '32';
        $new_vip = array(
            'mode' => 'ipalias',
            'interface' => $interface,
            'uniqid' => uniqid(),
            'descr' => $ip,
            'type' => 'single',
            'subnet_bits' => $subnet_bits,
            'subnet' => $ip
        );
        $config['virtualip']['vip'][] = $new_vip;
    }
    {% endif %}
    if (write_config(sprintf('Added virtual ips from ansible (%s@%s)', '{{ ansible_user }}', '{{ ansible_host }}'))) {
        foreach (array_unique(array_values($result['interface_map'])) as $interface) {
            interface_configure($interface);
        }
        echo "CHANGED";
        exit(0);
    }
    echo "UNCHANGED";
    exit(0);
    EOF
    php -f /tmp/configure_virtual_ips.php
    rm -f /tmp/configure_virtual_ips.php /tmp/check_result.json
  register: configure_result
  when: primary and check_result is defined and check_result.stdout is defined and (check_result.stdout | from_json).changed
  changed_when: configure_result.stdout == "CHANGED"

- name: Restart all interfaces
  ansible.builtin.shell: |
    cat > /tmp/restart_interfaces.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("interfaces.inc");
    require_once("util.inc");
    $interfaces = get_configured_interface_list();
    foreach ($interfaces as $interface) {
        interface_bring_down($interface);
        interface_configure($interface);
    }
    EOF
    php -f /tmp/restart_interfaces.php
    rm -f /tmp/restart_interfaces.php
  when: configure_result.changed
