---
- name: Set sync interface
  set_fact:
    sync_interface: "{{ {'key': 'sync', 'value': pfsense.network.interfaces.sync} if pfsense.network.interfaces.sync is defined else {'key': 'lan', 'value': pfsense.network.interfaces.lan} }}"
  when: pfsense.network.interfaces.lan is defined

- name: Check sync configuration
  ansible.builtin.shell: |
    cat > /tmp/check_sync.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    $current = array(
      'hasync' => array(
        'enable' => isset($config['hasync']['enable']) ? 'yes' : '',
        'synchronizetoip' => configget_path('hasync/synchronizetoip', ''),
        'synchronizetoport' => configget_path('hasync/synchronizetoport', ''),
        'pfsyncpeerip' => configget_path('hasync/pfsyncpeerip', ''),
        'pfsyncinterface' => configget_path('hasync/pfsyncinterface', ''),
        'username' => configget_path('hasync/username', ''),
        'password' => configget_path('hasync/password', ''),
        'synchronizeusers' => configget_path('hasync/synchronizeusers', ''),
        'synchronizeauthservers' => configget_path('hasync/synchronizeauthservers', ''),
        'synchronizecerts' => configget_path('hasync/synchronizecerts', ''),
        'synchronizerules' => configget_path('hasync/synchronizerules', ''),
        'synchronizeschedules' => configget_path('hasync/synchronizeschedules', ''),
        'synchronizealiases' => configget_path('hasync/synchronizealiases', ''),
        'synchronizenat' => configget_path('hasync/synchronizenat', ''),
        'synchronizeipsec' => configget_path('hasync/synchronizeipsec', ''),
        'synchronizeopenvpn' => configget_path('hasync/synchronizeopenvpn', ''),
        'synchronizedhcpd' => configget_path('hasync/synchronizedhcpd', ''),
        'synchronizedhcrelay' => configget_path('hasync/synchronizedhcrelay', ''),
        'synchronizedhcrelay6' => configget_path('hasync/synchronizedhcrelay6', ''),
        'synchronizewol' => configget_path('hasync/synchronizewol', ''),
        'synchronizestaticroutes' => configget_path('hasync/synchronizestaticroutes', ''),
        'synchronizevirtualip' => configget_path('hasync/synchronizevirtualip', ''),
        'synchronizetrafficshaper' => configget_path('hasync/synchronizetrafficshaper', ''),
        'synchronizetrafficshaperlimiter' => configget_path('hasync/synchronizetrafficshaperlimiter', ''),
        'synchronizednsforwarder' => configget_path('hasync/synchronizednsforwarder', ''),
        'synchronizecaptiveportal' => configget_path('hasync/synchronizecaptiveportal', ''),
        'pfhostid' => configget_path('hasync/pfhostid', '')
      )
    );
    $desired = array(
      'hasync' => array(
        'enable' => '',
        'synchronizetoip' => '',
        'synchronizetoport' => '',
        'pfsyncpeerip' => '',
        'pfsyncinterface' => '',
        'username' => '',
        'password' => '',
        'synchronizeusers' => '',
        'synchronizeauthservers' => '',
        'synchronizecerts' => '',
        'synchronizerules' => '',
        'synchronizeschedules' => '',
        'synchronizealiases' => '',
        'synchronizenat' => '',
        'synchronizeipsec' => '',
        'synchronizeopenvpn' => '',
        'synchronizedhcpd' => '',
        'synchronizedhcrelay' => '',
        'synchronizedhcrelay6' => '',
        'synchronizewol' => '',
        'synchronizestaticroutes' => '',
        'synchronizevirtualip' => '',
        'synchronizetrafficshaper' => '',
        'synchronizetrafficshaperlimiter' => '',
        'synchronizednsforwarder' => '',
        'synchronizecaptiveportal' => '',
        'pfhostid' => ''
      )
    );
    {% if ansible_play_hosts | length > 1 and primary %}
    $desired['hasync'] = array(
      'enable' => 'yes',
      'synchronizetoip' => '{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}',
      'synchronizetoport' => '22',
      'pfsyncpeerip' => '{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}',
      'pfsyncinterface' => '{{ sync_interface.key }}',
      'username' => '{{ pfsense.username }}',
      'password' => '{{ pfsense.password }}',
      'synchronizeusers' => 'on',
      'synchronizeauthservers' => 'on',
      'synchronizecerts' => 'on',
      'synchronizerules' => 'on',
      'synchronizeschedules' => 'on',
      'synchronizealiases' => 'on',
      'synchronizenat' => 'on',
      'synchronizeipsec' => 'on',
      'synchronizeopenvpn' => 'on',
      'synchronizedhcpd' => 'on',
      'synchronizedhcrelay' => 'on',
      'synchronizedhcrelay6' => 'on',
      'synchronizewol' => 'on',
      'synchronizestaticroutes' => 'on',
      'synchronizevirtualip' => 'on',
      'synchronizetrafficshaper' => 'on',
      'synchronizetrafficshaperlimiter' => 'on',
      'synchronizednsforwarder' => 'on',
      'synchronizecaptiveportal' => 'on',
      'pfhostid' => ''
    );
    {% endif %}
    echo json_encode(array(
      'changed' => $current != $desired,
      'current' => $current,
      'desired' => $desired
    ));
    EOF
    php -f /tmp/check_sync.php
    rm -f /tmp/check_sync.php
  register: sync_check
  changed_when: (sync_check.stdout | from_json).changed

- name: Configure sync
  ansible.builtin.shell: |
    cat > /tmp/update_sync.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    require_once("interfaces.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    if (isset($config['hasync'])) {
      unset($config['hasync']);
    }
    {% if ansible_play_hosts | length > 1 and primary %}
    config_set_path('hasync/enable', 'yes');
    config_set_path('hasync/synchronizetoip', '{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}');
    config_set_path('hasync/synchronizetoport', '22');
    config_set_path('hasync/pfsyncpeerip', '{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}');
    config_set_path('hasync/pfsyncinterface', '{{ sync_interface.key }}');
    config_set_path('hasync/username', '{{ pfsense.username }}');
    config_set_path('hasync/password', '{{ pfsense.password }}');
    config_set_path('hasync/synchronizeusers', 'on');
    config_set_path('hasync/synchronizeauthservers', 'on');
    config_set_path('hasync/synchronizecerts', 'on');
    config_set_path('hasync/synchronizerules', 'on');
    config_set_path('hasync/synchronizeschedules', 'on');
    config_set_path('hasync/synchronizealiases', 'on');
    config_set_path('hasync/synchronizenat', 'on');
    config_set_path('hasync/synchronizeipsec', 'on');
    config_set_path('hasync/synchronizeopenvpn', 'on');
    config_set_path('hasync/synchronizedhcpd', 'on');
    config_set_path('hasync/synchronizedhcrelay', 'on');
    config_set_path('hasync/synchronizedhcrelay6', 'on');
    config_set_path('hasync/synchronizewol', 'on');
    config_set_path('hasync/synchronizestaticroutes', 'on');
    config_set_path('hasync/synchronizevirtualip', 'on');
    config_set_path('hasync/synchronizetrafficshaper', 'on');
    config_set_path('hasync/synchronizetrafficshaperlimiter', 'on');
    config_set_path('hasync/synchronizednsforwarder', 'on');
    config_set_path('hasync/synchronizecaptiveportal', 'on');
    config_set_path('hasync/pfhostid', '');
    {% endif %}
    if (write_config(sprintf('Updated sync configuration from ansible (%s@%s)', '{{ ansible_user }}', '{{ ansible_host }}'))) {
      interfaces_sync_setup();
    }
    EOF
    {% if sync_check is changed %}
    php -f /tmp/update_sync.php
    {% endif %}
    rm -f /tmp/update_sync.php
  changed_when: sync_check is changed

- name: Configure pfsync firewall rule
  pfsensible.core.pfsense_rule:
    name: "ha state sync"
    action: "pass"
    interface: "{{ pfsense.network.interfaces.sync is defined | ternary('sync', 'lan') }}"
    protocol: "pfsync"
    source: "{{ sync_interface.value.ipv4.primary | regex_replace('/.*$', '') }}"
    destination: "{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}"
    state: present
  when: ansible_play_hosts | length > 1

- name: Configure carp firewall rule
  pfsensible.core.pfsense_rule:
    name: "ha carp"
    action: "pass"
    interface: "{{ pfsense.network.interfaces.sync is defined | ternary('sync', 'lan') }}"
    protocol: "carp"
    source: "any"
    destination: "any"
    state: present
  when: ansible_play_hosts | length > 1

- name: Configure xmlrpc sync firewall rule
  pfsensible.core.pfsense_rule:
    name: "ha xmlrpc"
    action: "pass"
    interface: "{{ pfsense.network.interfaces.sync is defined | ternary('sync', 'lan') }}"
    protocol: "tcp"
    source: "{{ sync_interface.value.ipv4.primary | regex_replace('/.*$', '') }}"
    destination: "{{ sync_interface.value.ipv4.secondary | regex_replace('/.*$', '') }}"
    destination_port: "443"
    state: present
  when: ansible_play_hosts | length > 1
