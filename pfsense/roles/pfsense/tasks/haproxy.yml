---
- name: Define haproxy regex patterns
  set_fact:
    haproxy_regex_key_val: '[a-zA-Z]+(?:=[^:;]+)?'
    haproxy_regex_key_vals: '(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*:)?'
    haproxy_regex_port: '\\d+'
    haproxy_regex_host_port: '[^:@]+:\\d+'
    haproxy_regex_weight: '(?:@\\d+)?'
    haproxy_regex_target: '(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*:)?[^:@]+:\\d+(?:@\\d+)?'
    haproxy_regex_shared_config: '(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*\\s*\\|\\s*)?'
    haproxy_regex_targets: '(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*:)?[^:@]+:\\d+(?:@\\d+)?(?:\\s*,\\s*(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*:)?[^:@]+:\\d+(?:@\\d+)?)*'
    haproxy_regex_frontend: '(?:[a-zA-Z]+(?:=[^:;]+)?(?:;[a-zA-Z]+(?:=[^:;]+)?)*:)?(?:[^:]+:)?\\d+'

- name: Parse haproxy rules
  set_fact:
    parsed_rules: "{{ pfsense.haproxy.rules | default([]) }}"

- name: Validate haproxy rules
  ansible.builtin.assert:
    that:
      - item is match('^{{ haproxy_regex_frontend }}\\s*->\\s*{{ haproxy_regex_shared_config }}{{ haproxy_regex_targets }}')
    fail_msg: |
      Invalid rule format: {{ item }}
      Format: [key[=val];...:][host:]port -> [shared_key[=val];...|][[key[=val];...:][host:]port[@weight],...]
  loop: "{{ parsed_rules }}"

- name: Check haproxy system settings
  ansible.builtin.shell: |
    cat > /tmp/check_system.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    function array_compare($a1, $a2) {
        if (count($a1) !== count($a2)) {
            return false;
        }
        foreach ($a1 as $key => $value) {
            if (!array_key_exists($key, $a2)) {
                return false;
            }
            if (is_array($value)) {
                if (!is_array($a2[$key])) {
                    return false;
                }
                if (!array_compare($value, $a2[$key])) {
                    return false;
                }
            } else if ($value !== $a2[$key]) {
                return false;
            }
        }
        return true;
    }
    $config = parse_config(true);
    if (!isset($config["installedpackages"])) {
        $config["installedpackages"] = array();
    }
    if (!isset($config["installedpackages"]["haproxy"])) {
        $config["installedpackages"]["haproxy"] = array();
    }
    $maxconn = "10000";
    $stats_port = "2200";
    $desired_global = array(
        "maxconn" => $maxconn,
        "enabled" => "",
        "section" => "global"
    );
    $desired_stats = array(
        'stats_port' => $stats_port,
        'stats_enabled' => 'yes',
        'stats_bind' => '127.0.0.1:' . $stats_port,
        'stats_uri' => '/haproxy?stats',
        'stats_realm' => 'HAProxy Statistics'
    );
    $current_stats = array(
        'stats_port' => isset($config['installedpackages']['haproxy']['stats']['stats_port']) ? $config['installedpackages']['haproxy']['stats']['stats_port'] : '',
        'stats_enabled' => isset($config['installedpackages']['haproxy']['stats']['stats_enabled']) ? $config['installedpackages']['haproxy']['stats']['stats_enabled'] : '',
        'stats_bind' => isset($config['installedpackages']['haproxy']['stats']['stats_bind']) ? $config['installedpackages']['haproxy']['stats']['stats_bind'] : '',
        'stats_uri' => isset($config['installedpackages']['haproxy']['stats']['stats_uri']) ? $config['installedpackages']['haproxy']['stats']['stats_uri'] : '',
        'stats_realm' => isset($config['installedpackages']['haproxy']['stats']['stats_realm']) ? $config['installedpackages']['haproxy']['stats']['stats_realm'] : ''
    );
    $haproxy_enabled = isset($config['installedpackages']['haproxy']['enable']) &&
        $config['installedpackages']['haproxy']['enable'] === '';
    if (!isset($config["installedpackages"]["haproxy"]["global"]) ||
        !array_compare($config["installedpackages"]["haproxy"]["global"], $desired_global) ||
        !isset($config["installedpackages"]["haproxy"]["maxconn"]) ||
        $config["installedpackages"]["haproxy"]["maxconn"] !== $maxconn ||
        !array_compare($current_stats, $desired_stats) ||
        $config['installedpackages']['haproxy']['localstatsport'] !== $stats_port ||
        !$haproxy_enabled) {
        echo "CHANGED";
    } else {
        echo "UNCHANGED";
    }
    EOF
    php -f /tmp/check_system.php
    rm -f /tmp/check_system.php
  register: haproxy_system_check
  changed_when: haproxy_system_check.stdout == "CHANGED"

- name: Configure haproxy system settings
  ansible.builtin.shell: |
    cat > /tmp/configure_system.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    $config = parse_config(true);
    if (!isset($config["installedpackages"])) {
        $config["installedpackages"] = array();
    }
    if (!isset($config["installedpackages"]["haproxy"])) {
        $config["installedpackages"]["haproxy"] = array();
    }
    $maxconn = "10000";
    $required_maxfiles = intval($maxconn) * 2 + 31;
    $stats_port = "2200";
    $config["installedpackages"]["haproxy"]["global"] = array(
        "maxconn" => $maxconn,
        "enabled" => "",
        "section" => "global"
    );
    $config["installedpackages"]["haproxy"]["maxconn"] = $maxconn;
    $config['installedpackages']['haproxy']['stats'] = array(
        'stats_port' => $stats_port,
        'stats_enabled' => 'yes',
        'stats_bind' => '127.0.0.1:' . $stats_port,
        'stats_uri' => '/haproxy?stats',
        'stats_realm' => 'HAProxy Statistics'
    );
    $config['installedpackages']['haproxy']['localstatsport'] = $stats_port;
    $config['installedpackages']['haproxy']['enable'] = '';
    write_config();
    haproxy_configure();
    echo "CHANGED";
    EOF
    php -f /tmp/configure_system.php || echo "UNCHANGED"
    rm -f /tmp/configure_system.php
  register: haproxy_system_config
  changed_when: haproxy_system_config.stdout == "CHANGED"
  when: haproxy_system_check.stdout == "CHANGED"

- name: Check haproxy configuration
  ansible.builtin.shell: |
    cat > /tmp/check_haproxy.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    function array_compare($a1, $a2) {
        $a1_filtered = array_filter($a1, function($key) {
            return $key !== "id" && $key !== "_index";
        }, ARRAY_FILTER_USE_KEY);
        $a2_filtered = array_filter($a2, function($key) {
            return $key !== "id" && $key !== "_index";
        }, ARRAY_FILTER_USE_KEY);
        if (isset($a1_filtered['frontends']) && isset($a2_filtered['frontends'])) {
            $frontends1 = array();
            $frontends2 = array();
            foreach ($a1_filtered['frontends'] as $frontend) {
                if (isset($frontend['name'])) {
                    $frontends1[$frontend['name']] = $frontend;
                }
            }
            foreach ($a2_filtered['frontends'] as $frontend) {
                if (isset($frontend['name'])) {
                    $frontends2[$frontend['name']] = $frontend;
                }
            }
            foreach ($a2_filtered['frontends'] as $frontend) {
                $name = $frontend['name'];
                if (!isset($frontends1[$name])) {
                    return false;
                }
                if (!array_compare($frontends1[$name], $frontend)) {
                    return false;
                }
            }
            unset($a1_filtered['frontends']);
            unset($a2_filtered['frontends']);
        }
        if (isset($a1_filtered['backends']) && isset($a2_filtered['backends'])) {
            $backends1 = array();
            $backends2 = array();
            foreach ($a1_filtered['backends'] as $backend) {
                if (isset($backend['name'])) {
                    $backends1[$backend['name']] = $backend;
                }
            }
            foreach ($a2_filtered['backends'] as $backend) {
                if (isset($backend['name'])) {
                    $backends2[$backend['name']] = $backend;
                }
            }
            foreach ($a2_filtered['backends'] as $backend) {
                $name = $backend['name'];
                if (!isset($backends1[$name])) {
                    return false;
                }
                if (!array_compare($backends1[$name], $backend)) {
                    return false;
                }
            }
            unset($a1_filtered['backends']);
            unset($a2_filtered['backends']);
        }
        if (count($a1_filtered) !== count($a2_filtered)) {
            return false;
        }
        foreach ($a1_filtered as $key => $value) {
            if (!array_key_exists($key, $a2_filtered)) {
                return false;
            }
            if (is_array($value)) {
                if (!is_array($a2_filtered[$key])) {
                    return false;
                }
                if ($key === "item") {
                    if (count($value) !== count($a2_filtered[$key])) {
                        return false;
                    }
                    $value_sorted = $value;
                    $a2_value_sorted = $a2_filtered[$key];
                    usort($value_sorted, function($a, $b) {
                        return strcmp(json_encode($a), json_encode($b));
                    });
                    usort($a2_value_sorted, function($a, $b) {
                        return strcmp(json_encode($a), json_encode($b));
                    });
                    for ($i = 0; $i < count($value_sorted); $i++) {
                        if (!array_compare($value_sorted[$i], $a2_value_sorted[$i])) {
                            return false;
                        }
                    }
                } else if (!array_compare($value, $a2_filtered[$key])) {
                    return false;
                }
            } else if ($value !== $a2_filtered[$key]) {
                return false;
            }
        }
        return true;
    }
    function config_exists() {
        global $config;
        if (!isset($config['installedpackages'])) return false;
        if (!isset($config['installedpackages']['haproxy'])) return false;
        if (!isset($config['installedpackages']['haproxy']['ha_backends'])) return false;
        if (!isset($config['installedpackages']['haproxy']['ha_pools'])) return false;
        return true;
    }
    $current = array(
        'frontends' => array(),
        'backends' => array()
    );
    if (config_exists()) {
        if (isset($config['installedpackages']['haproxy']['ha_backends']['item'])) {
            $current['frontends'] = $config['installedpackages']['haproxy']['ha_backends']['item'];
        }
        if (isset($config['installedpackages']['haproxy']['ha_pools']['item'])) {
            $current['backends'] = $config['installedpackages']['haproxy']['ha_pools']['item'];
        }
    }
    function get_next_id($type) {
        static $counters = array(
            'frontend' => 0,
            'backend' => 0,
            'server' => 0
        );
        $base_id = array(
            'frontend' => 10000,
            'backend' => 20000,
            'server' => 30000
        );
        $counters[$type]++;
        return strval($base_id[$type] + $counters[$type]);
    }
    function parse_key_values($str) {
        $result = array();
        if (empty($str)) return $result;
        $pairs = explode(';', $str);
        foreach ($pairs as $pair) {
            $pair = trim($pair);
            if (empty($pair)) continue;
            if (strpos($pair, '=') === false) {
                $result[$pair] = '';
            } else {
                list($key, $value) = explode('=', $pair, 2);
                $result[trim($key)] = trim($value);
            }
        }
        return $result;
    }
    function parse_frontend_target($str) {
        $parts = explode(':', trim($str));
        $result = array(
            'rules' => array(),
            'host' => '',
            'port' => ''
        );
        switch(count($parts)) {
            case 3:
                $result['rules'] = parse_key_values($parts[0]);
                $result['host'] = $parts[1];
                $result['port'] = $parts[2];
                break;
            case 2:
                $result['host'] = $parts[0];
                $result['port'] = $parts[1];
                break;
            case 1:
                $result['port'] = $parts[0];
                break;
        }
        return $result;
    }
    function parse_backend_target($str) {
        $result = array(
            'rules' => array(),
            'host' => '',
            'port' => '',
            'weight' => ''
        );
        $parts = explode('@', trim($str));
        $target = $parts[0];
        if (count($parts) > 1) {
            $result['weight'] = trim($parts[1]);
        }
        $parts = explode(':', trim($target));
        if (count($parts) >= 2 && $parts[0] === 'check') {
            $result['rules']['check'] = '';
            array_shift($parts);
        }
        switch(count($parts)) {
            case 3:
                if (!isset($result['rules']['check'])) {
                    $result['rules'] = parse_key_values($parts[0]);
                }
                $result['host'] = $parts[1];
                $result['port'] = $parts[2];
                break;
            case 2:
                if (strpos($parts[0], '=') !== false || strpos($parts[0], ';') !== false) {
                    if (!isset($result['rules']['check'])) {
                        $result['rules'] = parse_key_values(array_shift($parts));
                    }
                    $result['host'] = $parts[0];
                    $result['port'] = $parts[1];
                } else {
                    $result['host'] = $parts[0];
                    $result['port'] = $parts[1];
                }
                break;
            case 1:
                $result['port'] = $parts[0];
                break;
        }
        return $result;
    }
    function format_name($rule) {
        $parts = explode(' -> ', trim($rule));
        $cleaned_parts = array_map(function($part) {
            $part = trim($part); $subparts = explode(':', $part);
            if (count($subparts) > 1 && (strpos($subparts[0], '=') !== false || strpos($subparts[0], ';') !== false)) { array_shift($subparts); return implode('-', $subparts); }
            if (count($subparts) == 2 && preg_match('/^\\d+$/', $subparts[1])) { return implode('-', $subparts); }
            if (count($subparts) == 3 && $subparts[0] === 'check') { array_shift($subparts); return implode('-', $subparts); }
            return $part;
        }, $parts);
        return implode('_', $cleaned_parts);
    }
    $rules = {{ parsed_rules | to_json }};
    $desired = array(
        'frontends' => array(),
        'backends' => array()
    );
    if (!isset($config['installedpackages']['haproxy'])) {
        $config['installedpackages']['haproxy'] = array();
    }
    $config['installedpackages']['haproxy']['enable'] = '';
    foreach ($rules as $rule) {
        list($frontend_part, $backend_part) = explode('->', trim($rule), 2);
        $frontend = parse_frontend_target(trim($frontend_part));
        $port = $frontend['port'];
        $shared_config = array();
        $backend_targets_str = trim($backend_part);
        if (strpos($backend_targets_str, '|') !== false) {
            list($shared_opts, $backend_targets_str) = explode('|', $backend_targets_str, 2);
            $shared_config = parse_key_values(trim($shared_opts));
        }
        $frontend_name = format_name($rule);
        $backend_name = format_name($rule);
        $frontend_config = array(
            'name' => $frontend_name,
            'status' => 'active',
            'type' => isset($frontend['rules']['mode']) ? $frontend['rules']['mode'] : 'http',
            'httpclose' => 'http-keep-alive',
            'backend_serverpool' => $backend_name,
            'advanced' => '',
            'ha_acls' => '',
            'ha_certificates' => '',
            'clientcert_ca' => '',
            'clientcert_crl' => '',
            'descr' => $rule,
            'a_extaddr' => array(
                'item' => array(
                    array(
                        'extaddr' => 'wan_ipv4',
                        'extaddr_port' => $port,
                        '_index' => ''
                    )
                )
            ),
            'a_actionitems' => '',
            'a_errorfiles' => '',
            'id' => strval(get_next_id('frontend'))
        );
        if (isset($frontend['rules']['ssl'])) {
            $frontend_config['ssloffloadcert'] = $frontend['rules']['ssl'];
            $frontend_config['ssloffloadacl_an'] = 'yes';
        }
        foreach ($frontend['rules'] as $key => $value) {
            if ($key !== 'ssl') {
                $frontend_config[$key] = $value;
            }
        }
        $desired['frontends'][] = $frontend_config;
        $backend = array(
            'name' => $backend_name,
            'descr' => $rule,
            'status' => 'active',
            'ha_servers' => array('item' => array()),
            'a_acl' => '',
            'a_actionitems' => '',
            'errorfiles' => '',
            'advanced' => '',
            'advanced_backend' => '',
            'balance' => isset($shared_config['balance']) ? $shared_config['balance'] : 'roundrobin',
            'check_type' => (function() use ($shared_config, $backend_targets_str) {
                if (preg_match('/check=([^:;]+)/', $backend_targets_str, $matches)) {
                    return $matches[1];
                }
                if (preg_match('/(?:^|;)check(?::|\s*$|;)/', $backend_targets_str)) {
                    return 'Basic';
                }
                if (array_key_exists('check', $shared_config) && empty($shared_config['check'])) {
                    return 'Basic';
                }
                return 'none';
            })(),
            'id' => strval(get_next_id('backend'))
        );
        foreach ($shared_config as $key => $value) {
            if (!in_array($key, array('balance', 'check'))) {
                $backend[$key] = $value;
            }
        }
        $backend_targets = array_map('trim', explode(',', $backend_targets_str));
        foreach ($backend_targets as $idx => $target) {
            $target_info = parse_backend_target($target);
            $server = array(
                'status' => 'active',
                'name' => "{$backend_name}_srv_{$idx}",
                'descr' => $target,
                'address' => $target_info['host'],
                'port' => $target_info['port'],
                '_index' => '',
                'id' => strval(get_next_id('server')),
                'check' => ''
            );
            if (!empty($target_info['weight'])) {
                $server['weight'] = $target_info['weight'];
            }
            foreach ($target_info['rules'] as $key => $value) {
                $server[$key] = $value;
            }
            $backend['ha_servers']['item'][] = $server;
        }
        $desired['backends'][] = $backend;
    }
    $changed = !array_compare($current, $desired);
    $config_exists = config_exists();
    echo json_encode(array(
        'changed' => $changed,
        'current' => $current,
        'desired' => $desired,
        'config_exists' => $config_exists
    ));
    EOF
    php -f /tmp/check_haproxy.php
    rm -f /tmp/check_haproxy.php
  register: haproxy_check
  changed_when: haproxy_check.stdout == "CHANGED"
  when: primary

- name: Configure haproxy
  ansible.builtin.shell: |
    echo '{{ haproxy_check.stdout }}' > /tmp/haproxy_check.json
    cat > /tmp/update_haproxy.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    $json = file_get_contents('/tmp/haproxy_check.json');
    $check_result = json_decode($json, true);
    if (!$check_result['changed']) {
        echo "UNCHANGED";
        exit(0);
    }
    $desired = $check_result['desired'];
    $config = parse_config(true);
    if (!isset($config['installedpackages'])) {
        $config['installedpackages'] = array();
    }
    if (!isset($config['installedpackages']['haproxy'])) {
        $config['installedpackages']['haproxy'] = array();
    }
    $existing_frontends = isset($config['installedpackages']['haproxy']['ha_backends']['item']) 
        ? $config['installedpackages']['haproxy']['ha_backends']['item'] 
        : array();
    $existing_backends = isset($config['installedpackages']['haproxy']['ha_pools']['item'])
        ? $config['installedpackages']['haproxy']['ha_pools']['item']
        : array();
    $frontend_map = array();
    foreach ($existing_frontends as $frontend) {
        if (isset($frontend['name'])) {
            $frontend_map[$frontend['name']] = $frontend;
        }
    }
    $backend_map = array();
    foreach ($existing_backends as $backend) {
        if (isset($backend['name'])) {
            $backend_map[$backend['name']] = $backend;
        }
    }
    $merged_frontends = $existing_frontends;
    $merged_backends = $existing_backends;
    $merged_frontend_map = array();
    foreach ($merged_frontends as $idx => $frontend) {
        if (isset($frontend['name'])) {
            $merged_frontend_map[$frontend['name']] = $idx;
        }
    }
    $merged_backend_map = array();
    foreach ($merged_backends as $idx => $backend) {
        if (isset($backend['name'])) {
            $merged_backend_map[$backend['name']] = $idx;
        }
    }
    foreach ($desired['frontends'] as $new_frontend) {
        $name = $new_frontend['name'];
        if (isset($frontend_map[$name])) {
            $new_frontend['id'] = $frontend_map[$name]['id'];
            if (isset($frontend_map[$name]['_index'])) {
                $new_frontend['_index'] = $frontend_map[$name]['_index'];
            }
            if (isset($frontend_map[$name]['a_extaddr']['item']) && isset($new_frontend['a_extaddr']['item'])) {
                foreach ($new_frontend['a_extaddr']['item'] as $idx => $item) {
                    if (isset($frontend_map[$name]['a_extaddr']['item'][$idx])) {
                        if (isset($frontend_map[$name]['a_extaddr']['item'][$idx]['id'])) {
                            $new_frontend['a_extaddr']['item'][$idx]['id'] = $frontend_map[$name]['a_extaddr']['item'][$idx]['id'];
                        }
                        if (isset($frontend_map[$name]['a_extaddr']['item'][$idx]['_index'])) {
                            $new_frontend['a_extaddr']['item'][$idx]['_index'] = $frontend_map[$name]['a_extaddr']['item'][$idx]['_index'];
                        }
                    }
                }
            }
            if (isset($merged_frontend_map[$name])) {
                $merged_frontends[$merged_frontend_map[$name]] = $new_frontend;
            }
        } else {
            $merged_frontends[] = $new_frontend;
        }
    }
    foreach ($desired['backends'] as $new_backend) {
        $name = $new_backend['name'];
        if (isset($backend_map[$name])) {
            $new_backend['id'] = $backend_map[$name]['id'];
            if (isset($backend_map[$name]['_index'])) {
                $new_backend['_index'] = $backend_map[$name]['_index'];
            }
            if (isset($backend_map[$name]['ha_servers']['item']) && isset($new_backend['ha_servers']['item'])) {
                foreach ($new_backend['ha_servers']['item'] as $idx => $server) {
                    if (isset($backend_map[$name]['ha_servers']['item'][$idx])) {
                        if (isset($backend_map[$name]['ha_servers']['item'][$idx]['id'])) {
                            $new_backend['ha_servers']['item'][$idx]['id'] = $backend_map[$name]['ha_servers']['item'][$idx]['id'];
                        }
                        if (isset($backend_map[$name]['ha_servers']['item'][$idx]['_index'])) {
                            $new_backend['ha_servers']['item'][$idx]['_index'] = $backend_map[$name]['ha_servers']['item'][$idx]['_index'];
                        }
                    }
                }
            }
            if (isset($merged_backend_map[$name])) {
                $merged_backends[$merged_backend_map[$name]] = $new_backend;
            }
        } else {
            $merged_backends[] = $new_backend;
        }
    }
    $config['installedpackages']['haproxy']['ha_backends'] = array('item' => array_values($merged_frontends));
    $config['installedpackages']['haproxy']['ha_pools'] = array('item' => array_values($merged_backends));
    if (write_config()) {
        haproxy_configure();
        echo "CHANGED";
        exit(0);
    }
    exit(1);
    EOF
    php /tmp/update_haproxy.php
    rm -f /tmp/update_haproxy.php /tmp/haproxy_check.json
  register: haproxy_config
  changed_when: haproxy_config.stdout == "CHANGED"
  failed_when: haproxy_config.stdout.startswith("FAILED") or haproxy_config.rc != 0
  when: primary

- name: Verify HAProxy configuration
  ansible.builtin.shell: |
    cat > /tmp/verify_config.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    $config = parse_config(true);
    $haproxy_config = array();
    if (isset($config['installedpackages']['haproxy']['global'])) {
        $haproxy_config['global'] = $config['installedpackages']['haproxy']['global'];
    }
    if (isset($config['installedpackages']['haproxy']['stats'])) {
        $haproxy_config['stats'] = $config['installedpackages']['haproxy']['stats'];
    }
    echo json_encode($haproxy_config, JSON_PRETTY_PRINT);
    EOF
    php /tmp/verify_config.php
    rm -f /tmp/verify_config.php
  register: haproxy_verify
  changed_when: false

- name: Check haproxy sync settings
  shell: |
    cat > /tmp/check_sync.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    $config = parse_config(true);
    if (!isset($config['installedpackages']) || !isset($config['installedpackages']['haproxy'])) {
        echo "CHANGED:haproxy_sync_disabled";
        exit(0);
    }
    $haproxy_sync_enabled = isset($config['installedpackages']['haproxy']['enablesync']) &&
        $config['installedpackages']['haproxy']['enablesync'] === 'on';
    $ha_sync_enabled = isset($config['hasync']) &&
        isset($config['hasync']['synchronizetoip']) &&
        !empty($config['hasync']['synchronizetoip']) &&
        isset($config['hasync']['enable']) &&
        $config['hasync']['enable'] === 'yes';
    if (!$primary && !$haproxy_sync_enabled) {
        echo "UNCHANGED";
        exit(0);
    }
    if ($primary && $haproxy_sync_enabled !== $ha_sync_enabled) {
        echo "CHANGED:sync_mismatch";
        exit(0);
    }
    echo "UNCHANGED";
    EOF
    php -f /tmp/check_sync.php
    rm -f /tmp/check_sync.php
  register: haproxy_sync_check
  changed_when: haproxy_sync_check.stdout_lines[-1].startswith("CHANGED")

- name: Configure haproxy sync settings
  ansible.builtin.shell: |
    cat > /tmp/configure_sync.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    $config = parse_config(true);
    $haproxy_sync_enabled = isset($config['installedpackages']['haproxy']['enablesync']) &&
        $config['installedpackages']['haproxy']['enablesync'] === 'on';
    $ha_sync_enabled = isset($config['hasync']) &&
        isset($config['hasync']['synchronizetoip']) &&
        !empty($config['hasync']['synchronizetoip']) &&
        isset($config['hasync']['enable']) &&
        $config['hasync']['enable'] === 'yes';
    if (!$primary) {
        if ($haproxy_sync_enabled) {
            $config['installedpackages']['haproxy']['enablesync'] = 'off';
            if (write_config()) {
                haproxy_configure();
                echo "CHANGED";
                exit(0);
            }
        }
        echo "UNCHANGED";
        exit(0);
    }
    if ($haproxy_sync_enabled === $ha_sync_enabled) {
        echo "UNCHANGED";
        exit(0);
    }
    if (!isset($config['installedpackages'])) {
        $config['installedpackages'] = array();
    }
    if (!isset($config['installedpackages']['haproxy'])) {
        $config['installedpackages']['haproxy'] = array();
    }
    $config['installedpackages']['haproxy']['enablesync'] = $ha_sync_enabled ? 'on' : 'off';
    if (write_config()) {
        haproxy_configure();
        echo "CHANGED";
        exit(0);
    }
    echo "UNCHANGED";
    exit(0);
    EOF
    php -f /tmp/configure_sync.php || echo "UNCHANGED"
    rm -f /tmp/configure_sync.php
  register: haproxy_sync_config
  changed_when: haproxy_sync_config.stdout == "CHANGED"

- name: Restart haproxy service
  ansible.builtin.shell: |
    cat > /tmp/restart_haproxy.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("functions.inc");
    require_once("haproxy/haproxy.inc");
    require_once("service-utils.inc");
    $savemsg = array();
    $result = haproxy_check_and_run($savemsg, true);
    if (!$result) {
        fwrite(STDERR, $savemsg);
        exit(1);
    }
    unlink_if_exists("/tmp/config.cache");
    unlink_if_exists($d_haproxyconfdirty_path);
    EOF
    php -f /tmp/restart_haproxy.php 2>&1
    rm -f /tmp/restart_haproxy.php
  register: haproxy_restart
  when: haproxy_check.changed or haproxy_config.changed or haproxy_system_check.changed or haproxy_system_config.changed or (haproxy_sync_check.stdout_lines[-1].startswith("CHANGED") and haproxy_sync_config.changed)
