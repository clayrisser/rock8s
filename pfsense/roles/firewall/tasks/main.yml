---
- name: Port mappings
  set_fact:
    service_ports:
      dns: 53
      ftp: 21
      ftps: 990
      git: 9418
      http: 80
      https: 443
      imap: 143
      imaps: 993
      ldap: 389
      ldaps: 636
      mdns: 5353
      mongodb: 27017
      mysql: 3306
      ntp: 123
      pop3: 110
      pop3s: 995
      postgres: 5432
      rdp: 3389
      redis: 6379
      rtsp: 554
      sftp: 22
      sip: 5060
      smtp: 25
      smtps: 465
      snmp: 161
      ssh: 22
      syslog: 514
      telnet: 23
      vnc: 5900

- name: Validate interface rules
  assert:
    that:
      - item.value.rules is not defined or item.value.rules | type_debug == "list"
      - item.value.rules is not defined or item.value.rules | length <= 50
    fail_msg: "Invalid rules for interface {{ item.key }}. Rules must be a list with max 50 entries."
  loop: "{{ pfsense.network.interfaces | dict2items }}"
  when:
    - pfsense.network.interfaces is defined

- name: Validate rule format
  assert:
    that:
      - rule.1 is match('^(allow|deny)\s+(tcp\s+|udp\s+|icmp\s+)?from\s+\S+\s+to\s+\S+(\s+port\s+\S+)?$')
      - not (rule.1 is match('.*\sport\s+.*') and not rule.1 is match('.*\s(tcp|udp)\s+.*'))
      - not (rule.1 is match('.*\sport\s+(\d+):(\d+).*') and (rule.1 | regex_replace('.*\sport\s+(\d+):(\d+).*', '\1') | int) >= (rule.1 | regex_replace('.*\sport\s+(\d+):(\d+).*', '\2') | int))
      - not (rule.1 is match('.*\sport\s+.*') and not (rule.1 is match('.*\sport\s+(\d+)$') or rule.1 is match('.*\sport\s+(\d+):(\d+)$') or rule.1 is match('.*\sport\s+(' + service_ports.keys() | join('|') + ')$')))
      - not (rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+/\d+.*') and not rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+/\d+.*'))
      - not (rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+-\d+\.\d+\.\d+\.\d+.*') and not rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+-\d+\.\d+\.\d+\.\d+.*'))
      - not (',' in rule.1)
    fail_msg: |
      Invalid rule format: {{ rule.1 }}
      Format: allow/deny [tcp|udp|icmp] from SOURCE to DEST [port PORT]
      SOURCE/DEST can be: self, any, interface, CIDR, or IP range
  loop: "{{ pfsense.network.interfaces | dict2items | subelements('value.rules') }}"
  loop_control:
    loop_var: rule
    label: "{{ rule.1 }}"
  when:
    - pfsense.network.interfaces is defined

- name: Process rules with ports
  set_fact:
    processed_interfaces: |
      {% set result = [] %}
      {% for iface in pfsense.network.interfaces | dict2items %}
        {% set rules = [] %}
        {% for rule in iface.value.rules | default([]) %}
          {% if ' port ' in rule %}
            {% set port = rule | regex_replace('^.*port\\s+([\\S]+).*$', '\\1') %}
            {% if port in service_ports %}
              {% set _ = rules.append({'rule': rule, 'port': service_ports[port] | string}) %}
            {% elif ':' in port %}
              {% set range = port.split(':') %}
              {% set _ = rules.append({'rule': rule, 'port': range[0] ~ '-' ~ range[1]}) %}
            {% elif port | regex_search('^\\d+$') %}
              {% set _ = rules.append({'rule': rule, 'port': port}) %}
            {% endif %}
          {% else %}
            {% set _ = rules.append({'rule': rule}) %}
          {% endif %}
        {% endfor %}
        {% set _ = result.append({'key': iface.key, 'rules': rules}) %}
      {% endfor %}
      {{ result | to_json }}

- name: Configure interface firewall rules
  pfsensible.core.pfsense_rule:
    name: "{{ item.1.rule }}"
    action: "{{ (item.1.rule | regex_replace('^(\\w+).*$', '\\1') == 'allow') | ternary('pass', 'block') }}"
    interface: "{{ item.0.key }}"
    protocol: >-
      {%- if ' tcp ' in item.1.rule -%}
      tcp
      {%- elif ' udp ' in item.1.rule -%}
      udp
      {%- elif ' icmp ' in item.1.rule -%}
      icmp
      {%- else -%}
      any
      {%- endif -%}
    source: >-
      {%- set src = item.1.rule | regex_replace('^.*from\\s+(\\S+)\\s+to.*$', '\\1') -%}
      {%- if src == 'self' -%}
      {{ item.0.key }}
      {%- elif src | regex_search('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}$') -%}
      {{ src }}
      {%- else -%}
      any
      {%- endif -%}
    destination: >-
      {%- set dst = item.1.rule | regex_replace('^.*to\\s+(\\S+)(?:\\s+port.*)?$', '\\1') -%}
      {%- if dst == 'self' -%}
      {{ item.0.key }}
      {%- elif dst == 'any' -%}
      any
      {%- elif dst | regex_search('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}$') -%}
      {{ dst }}
      {%- else -%}
      {{ dst }}
      {%- endif -%}
    destination_port: "{{ item.1.port | default(omit) }}"
    state: present
  with_subelements:
    - "{{ processed_interfaces | from_json }}"
    - rules
  loop_control:
    index_var: rule_idx
    label: "{{ item.1.rule }}"
  register: firewall_rules
  when:
    - pfsense.network.interfaces is defined
