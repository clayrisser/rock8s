---
- name: Port mappings
  set_fact:
    service_ports:
      dns: 53
      ftp: 21
      ftps: 990
      git: 9418
      http: 80
      https: 443
      imap: 143
      imaps: 993
      ldap: 389
      ldaps: 636
      mdns: 5353
      mongodb: 27017
      mysql: 3306
      ntp: 123
      pop3: 110
      pop3s: 995
      postgres: 5432
      rdp: 3389
      redis: 6379
      rtsp: 554
      sftp: 22
      sip: 5060
      smtp: 25
      smtps: 465
      snmp: 161
      ssh: 22
      syslog: 514
      telnet: 23
      vnc: 5900

- name: Validate interface rules
  assert:
    that:
      - item.value.rules is not defined or item.value.rules | type_debug == "list"
      - item.value.rules is not defined or item.value.rules | length <= 50
    fail_msg: "Invalid rules for interface {{ item.key }}. Rules must be a list with max 50 entries."
  loop: "{{ pfsense.network.interfaces | dict2items }}"
  when:
    - pfsense.network.interfaces is defined

- name: Validate rule format
  assert:
    that:
      - rule.1 is match('^(allow|deny)\s+(tcp\s+|udp\s+|icmp\s+)?from\s+\S+\s+to\s+\S+(\s+port\s+\S+)?$')
      - not (rule.1 is match('.*\sport\s+.*') and not rule.1 is match('.*\s(tcp|udp)\s+.*'))
      - not (rule.1 is match('.*\sport\s+(\d+):(\d+).*') and (rule.1 | regex_replace('.*\sport\s+(\d+):(\d+).*', '\1') | int) >= (rule.1 | regex_replace('.*\sport\s+(\d+):(\d+).*', '\2') | int))
      - not (rule.1 is match('.*\sport\s+.*') and not (rule.1 is match('.*\sport\s+(\d+)$') or rule.1 is match('.*\sport\s+(\d+):(\d+)$') or rule.1 is match('.*\sport\s+(' + service_ports.keys() | join('|') + ')$')))
      - not (rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+/\d+.*') and not rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+/\d+.*'))
      - not (rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+-\d+\.\d+\.\d+\.\d+.*') and not rule.1 is match('.*\s(from|to)\s+\d+\.\d+\.\d+\.\d+-\d+\.\d+\.\d+\.\d+.*'))
      - not (',' in rule.1)
    fail_msg: |
      Invalid rule format: {{ rule.1 }}
      Format: allow/deny [tcp|udp|icmp] from SOURCE to DEST [port PORT]
      SOURCE/DEST can be: self, any, interface, CIDR, or IP range
  loop: "{{ pfsense.network.interfaces | dict2items | subelements('value.rules', {'skip_missing': true}) }}"
  loop_control:
    loop_var: rule
    label: "{{ rule.1 }}"
  when:
    - pfsense.network.interfaces is defined

- name: Process rules with ports
  set_fact:
    processed_interfaces: |
      {% set result = {} %}
      {% for iface in pfsense.network.interfaces | dict2items %}
        {% if iface.value.rules is defined and iface.value.rules %}
          {% set rules = [] %}
          {% for rule in iface.value.rules %}
            {% if ' port ' in rule %}
              {% set port = rule | regex_replace('^.*port\\s+([\\S]+).*$', '\\1') %}
              {% if port in service_ports %}
                {% set _ = rules.append({'rule': rule, 'port': service_ports[port] | string}) %}
              {% elif ':' in port %}
                {% set range = port.split(':') %}
                {% set _ = rules.append({'rule': rule, 'port': range[0] ~ '-' ~ range[1]}) %}
              {% elif port | regex_search('^\\d+$') %}
                {% set _ = rules.append({'rule': rule, 'port': port}) %}
              {% endif %}
            {% else %}
              {% set _ = rules.append({'rule': rule}) %}
            {% endif %}
          {% endfor %}
          {% set _ = result.update({iface.key: {'rules': rules}}) %}
        {% endif %}
      {% endfor %}
      {{ result | to_json }}
  register: processed_rules

- name: Check current firewall rules
  ansible.builtin.shell: |
    cat > /tmp/check_rules.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    function normalize_rule($rule) {
        return array(
            'name' => $rule['descr'],
            'action' => $rule['type'],
            'interface' => $rule['interface'],
            'protocol' => isset($rule['protocol']) ? $rule['protocol'] : 'any',
            'source' => isset($rule['source']) ? $rule['source'] : array('any' => ''),
            'destination' => isset($rule['destination']) ? $rule['destination'] : array('any' => ''),
            'destination_port' => isset($rule['destination']['port']) ? $rule['destination']['port'] : ''
        );
    }
    $current_rules = array();
    if (isset($config['filter']['rule'])) {
        foreach ($config['filter']['rule'] as $rule) {
            $current_rules[] = normalize_rule($rule);
        }
    }
    echo json_encode($current_rules);
    EOF
    php -f /tmp/check_rules.php
    rm -f /tmp/check_rules.php
  register: current_rules
  changed_when: false

- name: Configure firewall rules
  ansible.builtin.shell: |
    cat > /tmp/configure_firewall_rules.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    require_once("filter.inc");
    $config = parse_config(true);
    $rules = json_decode('{{ pfsense.network.interfaces.wan.rules | to_json }}', true);
    $changes = false;
    foreach ($rules as $rule_text) {
        if (empty($rule_text)) continue;
        if (!preg_match('/^(allow|deny)\s+(tcp|udp|icmp)?\s*from\s+([^\s]+)\s+to\s+([^\s]+)(\s+.*)?$/', $rule_text, $matches)) continue;
        $action = $matches[1];
        $protocol = !empty($matches[2]) ? $matches[2] : 'tcp';
        $source = preg_replace('/^\[|\]$/', '', $matches[3]);
        $destination = preg_replace('/^\[|\]$/', '', $matches[4]);
        $is_ipv6 = (strpos($source, ':') !== false && $source !== 'any') ||
                   (strpos($destination, ':') !== false && $destination !== 'any');
        $pf_action = ($action === 'allow') ? 'pass' : 'block';
        $source_config = ($source === 'any') ? array('any' => '') : array('address' => $source);
        $destination_config = ($destination === 'any') ? array('any' => '') : array('address' => $destination);
        $rule_exists = false;
        if (isset($config['filter']['rule']) && is_array($config['filter']['rule'])) {
            foreach ($config['filter']['rule'] as $key => $rule) {
                if ($rule['descr'] === $rule_text) {
                    if ($rule['type'] === $pf_action &&
                        $rule['ipprotocol'] === ($is_ipv6 ? 'inet6' : 'inet') &&
                        $rule['protocol'] === $protocol) {
                        $src_match = ($source === 'any' && isset($rule['source']['any'])) ||
                                     ($source !== 'any' && isset($rule['source']['address']) &&
                                      $rule['source']['address'] === $source);
                        $dst_match = ($destination === 'any' && isset($rule['destination']['any'])) ||
                                     ($destination !== 'any' && isset($rule['destination']['address']) &&
                                      $rule['destination']['address'] === $destination);
                        if ($src_match && $dst_match) {
                            $rule_exists = true;
                            break;
                        }
                    }
                    unset($config['filter']['rule'][$key]);
                    break;
                }
            }
        }
        if (!$rule_exists) {
            if (!isset($config['filter']['rule']) || !is_array($config['filter']['rule'])) {
                $config['filter']['rule'] = array();
            }
            array_push($config['filter']['rule'], array(
                'type' => $pf_action,
                'ipprotocol' => $is_ipv6 ? 'inet6' : 'inet',
                'interface' => 'wan',
                'source' => $source_config,
                'destination' => $destination_config,
                'descr' => $rule_text,
                'protocol' => $protocol
            ));
            $changes = true;
        }
    }
    if ($changes) {
        write_config("Firewall rules via API") && filter_configure() ?
            exit(print("CHANGED")) : exit(1);
    }
    exit(print("NO_CHANGE"));
    EOF
    php -f /tmp/configure_firewall_rules.php
    rm -f /tmp/configure_firewall_rules.php
  register: firewall_rules_result
  changed_when: firewall_rules_result.stdout == "CHANGED"
  when:
    - pfsense.network.interfaces is defined
    - pfsense.network.interfaces.wan.rules is defined
