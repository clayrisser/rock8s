---
- name: Port mappings
  set_fact:
    service_ports:
      dns: 53
      ftp: 21
      ftps: 990
      git: 9418
      http: 80
      https: 443
      imap: 143
      imaps: 993
      ldap: 389
      ldaps: 636
      mdns: 5353
      mongodb: 27017
      mysql: 3306
      ntp: 123
      pop3: 110
      pop3s: 995
      postgres: 5432
      rdp: 3389
      redis: 6379
      rtsp: 554
      sftp: 22
      sip: 5060
      smtp: 25
      smtps: 465
      snmp: 161
      ssh: 22
      syslog: 514
      telnet: 23
      vnc: 5900

- name: Process rules with ports
  ansible.builtin.set_fact:
    processed_interfaces: |
      {%- set result = {} -%}
      {%- for iface in pfsense.network.interfaces | dict2items -%}
        {%- if iface.value.rules is defined and iface.value.rules -%}
          {%- set rules = [] -%}
          {%- for rule in iface.value.rules -%}
            {%- set rule_data = {'rule': rule} -%}
            {%- if ' from ' in rule and ' port ' in rule -%}
              {%- if ' from ' in rule and ' port ' in rule and ' to ' in rule -%}
                {%- set before_to = rule.split(' to ')[0] -%}
                {%- set after_to = rule.split(' to ')[1] -%}
                {%- if ' port ' in before_to -%}
                  {%- set src_port = before_to.split(' port ')[1] | trim -%}
                  {%- if src_port in service_ports -%}
                    {%- set _ = rule_data.update({'source_port': service_ports[src_port] | string}) -%}
                  {%- elif ':' in src_port -%}
                    {%- set range = src_port.split(':') -%}
                    {%- if range[0] | int < range[1] | int -%}
                      {%- set _ = rule_data.update({'source_port': range[0] ~ '-' ~ range[1]}) -%}
                    {%- else -%}
                      {# Invalid range - ignore #}
                    {%- endif -%}
                  {%- elif '-' in src_port -%}
                    {%- set range = src_port.split('-') -%}
                    {%- if range[0] | int < range[1] | int -%}
                      {%- set _ = rule_data.update({'source_port': src_port}) -%}
                    {%- else -%}
                      {# Invalid range - ignore #}
                    {%- endif -%}
                  {%- elif src_port | regex_search('^\\d+$') -%}
                    {%- set _ = rule_data.update({'source_port': src_port}) -%}
                  {%- endif -%}
                {%- endif -%}
                {%- if ' port ' in after_to -%}
                  {%- set dst_port = after_to.split(' port ')[1] | trim -%}
                  {%- if dst_port in service_ports -%}
                    {%- set _ = rule_data.update({'dest_port': service_ports[dst_port] | string}) -%}
                  {%- elif ':' in dst_port -%}
                    {%- set range = dst_port.split(':') -%}
                    {%- if range[0] | int < range[1] | int -%}
                      {%- set _ = rule_data.update({'dest_port': range[0] ~ '-' ~ range[1]}) -%}
                    {%- else -%}
                      {# Invalid range - ignore #}
                    {%- endif -%}
                  {%- elif '-' in dst_port -%}
                    {%- set range = dst_port.split('-') -%}
                    {%- if range[0] | int < range[1] | int -%}
                      {%- set _ = rule_data.update({'dest_port': dst_port}) -%}
                    {%- endif -%}
                  {%- elif dst_port | regex_search('^\\d+$') -%}
                    {%- set _ = rule_data.update({'dest_port': dst_port}) -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
            {%- set _ = rules.append(rule_data) -%}
          {%- endfor -%}
          {%- set _ = result.update({iface.key: {'rules': rules}}) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ result | to_json }}
  register: processed_rules

- name: Check current firewall rules
  ansible.builtin.shell: |
    cat > /tmp/check_rules.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("config.lib.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    function normalize_rule($rule) {
        return array(
            'name' => $rule['descr'],
            'action' => $rule['type'],
            'interface' => $rule['interface'],
            'protocol' => isset($rule['protocol']) ? $rule['protocol'] : 'any',
            'source' => isset($rule['source']) ? $rule['source'] : array('any' => ''),
            'destination' => isset($rule['destination']) ? $rule['destination'] : array('any' => ''),
            'destination_port' => isset($rule['destination']['port']) ? $rule['destination']['port'] : ''
        );
    }
    $current_rules = array();
    if (isset($config['filter']['rule'])) {
        foreach ($config['filter']['rule'] as $rule) {
            $current_rules[] = normalize_rule($rule);
        }
    }
    echo json_encode($current_rules);
    EOF
    php -f /tmp/check_rules.php
    rm -f /tmp/check_rules.php
  register: current_rules
  changed_when: false

- name: Configure interface firewall rules
  pfsensible.core.pfsense_rule:
    name: "{{ item.1.rule }}"
    action: "{{ (item.1.rule | regex_replace('^(\\w+).*$', '\\1') == 'allow') | ternary('pass', 'block') }}"
    interface: "{{ item.0.key }}"
    protocol: >-
      {%- if ' tcp ' in item.1.rule -%}
      tcp
      {%- elif ' udp ' in item.1.rule -%}
      udp
      {%- elif ' icmp ' in item.1.rule -%}
      icmp
      {%- else -%}
      any
      {%- endif -%}
    source: >-
      {%- set src = item.1.rule | regex_replace('^.*from\\s+(\\S+)(?:\\s+port.*)?\\s+to.*$', '\\1') -%}
      {%- if src == 'self' -%}
      {{ item.0.key }}
      {%- elif src == 'any' -%}
      any
      {%- elif src in pfsense.network.interfaces | default({}) | dict2items | map(attribute='key') | list -%}
      {{ src }}
      {%- elif src | regex_search('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(/\\d{1,2})?$') -%}
      {{ src }}
      {%- else -%}
      {{ src }}
      {%- endif -%}
    source_port: "{{ item.1.source_port | default(omit) }}"
    destination: >-
      {%- set dst = item.1.rule | regex_replace('^.*to\\s+(\\S+)(?:\\s+port.*)?$', '\\1') -%}
      {%- if dst == 'self' -%}
      {{ item.0.key }}
      {%- elif dst == 'any' -%}
      any
      {%- elif dst in pfsense.network.interfaces | default({}) | dict2items | map(attribute='key') | list -%}
      {{ dst }}
      {%- elif dst | regex_search('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(/\\d{1,2})?$') -%}
      {{ dst }}
      {%- else -%}
      {{ dst }}
      {%- endif -%}
    destination_port: "{{ item.1.dest_port | default(omit) }}"
    state: present
  with_subelements:
    - "{{ processed_rules.ansible_facts.processed_interfaces | from_json | dict2items }}"
    - value.rules
  loop_control:
    index_var: rule_idx
    label: "{{ item.1.rule }}"
  register: firewall_rules
  when:
    - pfsense.network.interfaces is defined
    - processed_rules.ansible_facts.processed_interfaces | from_json | length > 0
    - not (current_rules.stdout | from_json | selectattr('name', 'equalto', item.1.rule) | selectattr('interface', 'equalto', item.0.key) | list | length > 0)
    - not (':' in item.1.rule) and not ('[' in item.1.rule)

- name: Configure IPv6 firewall rules
  ansible.builtin.shell: |
    cat > /tmp/configure_ipv6_rule.php << 'EOF'
    <?php
    require_once("config.inc");
    require_once("util.inc");
    require_once("interfaces.inc");
    require_once("services.inc");
    require_once("filter.inc");
    require_once("shaper.inc");
    global $config;
    if (!is_array($config)) {
        $config = parse_config();
    }
    $rule_text = "{{ item.1.rule }}";
    $interface = "{{ item.0.key }}";
    if (strpos($rule_text, ':') === false) {
        exit(0);
    }
    $action = (strpos($rule_text, 'allow') === 0) ? 'pass' : 'block';
    $protocol = 'any';
    if (strpos($rule_text, ' tcp ') !== false) {
        $protocol = 'tcp';
    } else if (strpos($rule_text, ' udp ') !== false) {
        $protocol = 'udp';
    } else if (strpos($rule_text, ' icmp ') !== false) {
        $protocol = 'icmp';
    }
    preg_match('/from\s+(\S+)(?:\s+port\s+(\S+))?\s+to\s+(\S+)(?:\s+port\s+(\S+))?/', $rule_text, $matches);
    $source = $matches[1];
    $source_port = isset($matches[2]) ? $matches[2] : '';
    $destination = isset($matches[3]) ? $matches[3] : '';
    $dest_port = isset($matches[4]) ? $matches[4] : '';
    if (preg_match('/^\[(.*)\]$/', $source, $src_matches)) {
        $source = $src_matches[1];
    }
    if (preg_match('/^\[(.*)\]$/', $destination, $dst_matches)) {
        $destination = $dst_matches[1];
    }
    $service_ports = json_decode('{{ service_ports | to_json }}', true);
    $source_port_value = $source_port;
    if (!empty($source_port) && isset($service_ports[$source_port])) {
        $source_port_value = (string)$service_ports[$source_port];
    }
    $dest_port_value = $dest_port;
    if (!empty($dest_port) && isset($service_ports[$dest_port])) {
        $dest_port_value = (string)$service_ports[$dest_port];
    }
    $exists = false;
    $needs_update = false;
    $rule_index = -1;
    if (isset($config['filter']['rule'])) {
        foreach ($config['filter']['rule'] as $idx => $rule) {
            if ($rule['descr'] === $rule_text && $rule['interface'] === $interface) {
                $exists = true;
                $rule_index = $idx;
                if (strpos($destination, ':') !== false) {
                    if (!isset($rule['destination']['address']) || $rule['destination']['address'] !== $destination) {
                        $needs_update = true;
                    }
                }
                break;
            }
        }
    }
    if (!$exists || $needs_update) {
        $rule = array();
        $rule['descr'] = $rule_text;
        $rule['interface'] = $interface;
        $rule['type'] = $action;
        $rule['ipprotocol'] = 'inet6';
        $rule['protocol'] = $protocol;
        if ($source === 'self') {
            $rule['source'] = array('network' => $interface);
        } else if ($source === 'any') {
            $rule['source'] = array('any' => '');
        } else if (strpos($source, ':') !== false) {
            $rule['source'] = array('address' => $source);
        } else if (in_array($source, array('lan', 'wan', 'opt1', 'opt2'))) {
            $rule['source'] = array('network' => $source);
        } else {
            $rule['source'] = array('any' => '');
        }
        if (!empty($source_port)) {
            if (strpos($source_port, ':') !== false) {
                list($start, $end) = explode(':', $source_port);
                if (intval($start) < intval($end)) {
                    $rule['source']['port'] = $start . '-' . $end;
                }
            } else if (strpos($source_port, '-') !== false) {
                list($start, $end) = explode('-', $source_port);
                if (intval($start) < intval($end)) {
                    $rule['source']['port'] = $source_port;
                }
            } else {
                $rule['source']['port'] = $source_port_value;
            }
        }
        if ($destination === 'self') {
            $rule['destination'] = array('network' => $interface);
        } else if ($destination === 'any') {
            $rule['destination'] = array('any' => '');
        } else if (strpos($destination, ':') !== false) {
            $rule['destination'] = array('address' => $destination);
        } else if (in_array($destination, array('lan', 'wan', 'opt1', 'opt2'))) {
            $rule['destination'] = array('network' => $destination);
        } else {
            $rule['destination'] = array('any' => '');
        }
        if (!empty($dest_port)) {
            if (strpos($dest_port, ':') !== false) {
                list($start, $end) = explode(':', $dest_port);
                if (intval($start) < intval($end)) {
                    $rule['destination']['port'] = $start . '-' . $end;
                }
            } else if (strpos($dest_port, '-') !== false) {
                list($start, $end) = explode('-', $dest_port);
                if (intval($start) < intval($end)) {
                    $rule['destination']['port'] = $dest_port;
                }
            } else {
                $rule['destination']['port'] = $dest_port_value;
            }
        }
        if (!isset($config['filter'])) {
            $config['filter'] = array();
        }
        if (!isset($config['filter']['rule'])) {
            $config['filter']['rule'] = array();
        }
        if ($needs_update && $rule_index >= 0) {
            $config['filter']['rule'][$rule_index] = $rule;
        } else {
            $config['filter']['rule'][] = $rule;
        }
        if (write_config("Updated IPv6 firewall rule from ansible")) {
            filter_configure();
            echo "CHANGED";
            exit(0);
        }
    }
    echo "UNCHANGED";
    exit(0);
    EOF
    php -f /tmp/configure_ipv6_rule.php
    rm -f /tmp/configure_ipv6_rule.php
  register: ipv6_rule_output
  changed_when: ipv6_rule_output.stdout.startswith("CHANGED")
  with_subelements:
    - "{{ processed_rules.ansible_facts.processed_interfaces | from_json | dict2items }}"
    - value.rules
  loop_control:
    index_var: rule_idx
    label: "{{ item.1.rule }}"
  when:
    - pfsense.network.interfaces is defined
    - processed_rules.ansible_facts.processed_interfaces | from_json | length > 0
    - not (current_rules.stdout | from_json | selectattr('name', 'equalto', item.1.rule) | selectattr('interface', 'equalto', item.0.key) | list | length > 0)
    - (':' in item.1.rule) or ('[' in item.1.rule)
